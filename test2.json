{
    "HumanEval/0": {
        "TestCase": "method{:test} check(){\nvar call0:= has_close_elements([1.00000000,2.00000000,3.00000000],0.50000000) ;\nvar call1:= has_close_elements([1.00000000,2.80000000,3.00000000,4.00000000,5.00000000,2.00000000],0.30000000) ;\nvar call2:= has_close_elements([0.10000000,0.20000000,0.30000000,0.40000000],0.15000000) ;\nvar call3:= has_close_elements([10.50000000,11.70000000,13.20000000,10.90000000],0.80000000) ;\nvar call4:= has_close_elements([-1.00000000,-1.50000000,-2.00000000,-0.50000000],0.60000000) ;\nvar call5:= has_close_elements([100.00000000,200.00000000,300.00000000,400.00000000,500.00000000],50.00000000) ;\nvar call6:= has_close_elements([3.14150000,3.14100000,2.71800000,1.61800000],0.00100000) ;\nvar call7:= has_close_elements([0.00000000,-0.10000000,-0.20000000,0.10000000],0.15000000) ;\nvar call8:= has_close_elements([5.50000000,5.70000000,5.90000000,6.10000000],0.30000000) ;\nvar call9:= has_close_elements([0.33300000,0.66600000,1.00000000,0.34200000],0.05000000) ;\nexpect call0==false;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==false;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/1": {
        "TestCase": "method{:test} check(){\nvar call0:= separate_paren_groups(\"(()(()))\") ;\nvar call1:= separate_paren_groups(\"()()(()())\") ;\nvar call2:= separate_paren_groups(\"((()))(())()\") ;\nvar call3:= separate_paren_groups(\"(((()))(()))\") ;\nvar call4:= separate_paren_groups(\"() ((())) (() (()))\") ;\nvar call5:= separate_paren_groups(\"()() ((()())) (())\") ;\nvar call6:= separate_paren_groups(\"(()()) (()) ((()))\") ;\nvar call7:= separate_paren_groups(\"((())) (()()) () ()\") ;\nvar call8:= separate_paren_groups(\"() ((()) ()) ((())) (()())\") ;\nvar call9:= separate_paren_groups(\"() () () (()(()())) ((()))\") ;\nexpect call0==[\"(()(()))\"];\nexpect call1==[\"()\",\"()\",\"(()())\"];\nexpect call2==[\"((()))\",\"(())\",\"()\"];\nexpect call3==[\"(((()))(()))\"];\nexpect call4==[\"()\",\"((()))\",\"(()(()))\"];\nexpect call5==[\"()\",\"()\",\"((()()))\",\"(())\"];\nexpect call6==[\"(()())\",\"(())\",\"((()))\"];\nexpect call7==[\"((()))\",\"(()())\",\"()\",\"()\"];\nexpect call8==[\"()\",\"((())())\",\"((()))\",\"(()())\"];\nexpect call9==[\"()\",\"()\",\"()\",\"(()(()()))\",\"((()))\"];\n}\n"
    },
    "HumanEval/2": {
        "TestCase": "method{:test} check(){\nvar call0:= truncate_number(3.50000000) ;\nvar call1:= truncate_number(7.25000000) ;\nvar call2:= truncate_number(1.99900000) ;\nvar call3:= truncate_number(4.00000000) ;\nvar call4:= truncate_number(123.45600000) ;\nvar call5:= truncate_number(45.00100000) ;\nvar call6:= truncate_number(0.99000000) ;\nvar call7:= truncate_number(1000.00010000) ;\nvar call8:= truncate_number(0.00000000) ;\nvar call9:= truncate_number(99.99990000) ;\nexpect call0==0.50000000;\nexpect call1==0.25000000;\nexpect call2==0.99900000;\nexpect call3==0.00000000;\nexpect call4==0.45600000;\nexpect call5==0.00100000;\nexpect call6==0.99000000;\nexpect call7==0.00010000;\nexpect call8==0.00000000;\nexpect call9==0.99990000;\n}\n"
    },
    "HumanEval/3": {
        "TestCase": "method{:test} check(){\nvar call0:= below_zero([1,2,3]) ;\nvar call1:= below_zero([1,2,-4,5]) ;\nvar call2:= below_zero([-1,2,-3,4]) ;\nvar call3:= below_zero([10,-10,-1,5]) ;\nvar call4:= below_zero([0,0,0]) ;\nvar call5:= below_zero([-5,-2,-1,10]) ;\nvar call6:= below_zero([5,-6,1,-1]) ;\nvar call7:= below_zero([100,-50,-100,50]) ;\nvar call8:= below_zero([1,-1,-1,1]) ;\nvar call9:= below_zero([2,2,-5,3,-10]) ;\nexpect call0==false;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==false;\nexpect call5==true;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/4": {
        "TestCase": "method{:test} check(){\nvar call0:= mean_absolute_deviation([1.00000000,2.00000000,3.00000000,4.00000000]) ;\nvar call1:= mean_absolute_deviation([10.00000000,20.00000000,30.00000000,40.00000000,50.00000000]) ;\nvar call2:= mean_absolute_deviation([0.00000000,0.00000000,0.00000000,0.00000000]) ;\nvar call3:= mean_absolute_deviation([1.00000000,-1.00000000,1.00000000,-1.00000000,1.00000000,-1.00000000]) ;\nvar call4:= mean_absolute_deviation([100.00000000,200.00000000,300.00000000]) ;\nvar call5:= mean_absolute_deviation([5.50000000,5.50000000,5.50000000,5.50000000]) ;\nvar call6:= mean_absolute_deviation([1.00000000]) ;\nvar call7:= mean_absolute_deviation([-10.00000000,-20.00000000,-30.00000000,-40.00000000]) ;\nvar call8:= mean_absolute_deviation([3.50000000,2.50000000,5.00000000,10.00000000,1.00000000]) ;\nvar call9:= mean_absolute_deviation([0.10000000,0.01000000,0.00100000,0.00010000,0.00001000]) ;\nexpect call0==1.00000000;\nexpect call1==12.00000000;\nexpect call2==0.00000000;\nexpect call3==1.00000000;\nexpect call4==66.66666667;\nexpect call5==0.00000000;\nexpect call6==0.00000000;\nexpect call7==10.00000000;\nexpect call8==2.48000000;\nexpect call9==0.03111120;\n}\n"
    },
    "HumanEval/5": {
        "TestCase": "method{:test} check(){\nvar call0:= intersperse([1,2,3],4) ;\nvar call1:= intersperse([],10) ;\nvar call2:= intersperse([7],5) ;\nvar call3:= intersperse([1,2,3,4,5],0) ;\nvar call4:= intersperse([100,200,300],-5) ;\nvar call5:= intersperse([1,1,1,1],999) ;\nvar call6:= intersperse([0,-1,-2,-3],2) ;\nvar call7:= intersperse([5,10,15],100) ;\nvar call8:= intersperse([8,16,32,64],1) ;\nvar call9:= intersperse([42],42) ;\nexpect call0==[1,4,2,4,3];\nexpect call1==[];\nexpect call2==[7];\nexpect call3==[1,0,2,0,3,0,4,0,5];\nexpect call4==[100,-5,200,-5,300];\nexpect call5==[1,999,1,999,1,999,1];\nexpect call6==[0,2,-1,2,-2,2,-3];\nexpect call7==[5,100,10,100,15];\nexpect call8==[8,1,16,1,32,1,64];\nexpect call9==[42];\n}\n"
    },
    "HumanEval/6": {
        "TestCase": "method{:test} check(){\nvar call0:= parse_nested_parens(\"(()()) ((())) () ((())()())\") ;\nvar call1:= parse_nested_parens(\"() (()) (((()))) () ()()\") ;\nvar call2:= parse_nested_parens(\"((()())) ((((((())))))) () (()(())) (())\") ;\nvar call3:= parse_nested_parens(\"() (()) (()(())) ((((()))))\") ;\nvar call4:= parse_nested_parens(\"(((((()))))) (()(())) (()) () ((()))\") ;\nvar call5:= parse_nested_parens(\"() () () () ()\") ;\nvar call6:= parse_nested_parens(\"((())) (()(())) ((((())))) ((())) ()\") ;\nvar call7:= parse_nested_parens(\"(()) (()(())) (((((((())))))) (((())) ((())))\") ;\nvar call8:= parse_nested_parens(\"((((((((())))))))) (((((()))))) (()())\") ;\nvar call9:= parse_nested_parens(\"() (((()))) ((()()())) () ((())) (() (()(())))\") ;\nexpect call0==[2,3,1,3];\nexpect call1==[1,2,4,1,1];\nexpect call2==[3,7,1,3,2];\nexpect call3==[1,2,3,5];\nexpect call4==[6,3,2,1,3];\nexpect call5==[1,1,1,1,1];\nexpect call6==[3,3,5,3,1];\nexpect call7==[2,3,8,4,3];\nexpect call8==[9,6,2];\nexpect call9==[1,4,3,1,3,2,3];\n}\n"
    },
    "HumanEval/7": {
        "TestCase": "method{:test} check(){\nvar call0:= filter_by_substring([\"apple\",\"banana\",\"cherry\",\"date\"],\"a\") ;\nvar call1:= filter_by_substring([\"hello\",\"world\",\"python\",\"code\"],\"o\") ;\nvar call2:= filter_by_substring([\"abc\",\"def\",\"ghi\",\"jkl\"],\"x\") ;\nvar call3:= filter_by_substring([\"substring\",\"string\",\"search\",\"filter\"],\"sub\") ;\nvar call4:= filter_by_substring([\"test\",\"example\",\"sample\",\"demo\"],\"ple\") ;\nvar call5:= filter_by_substring([],\"nothing\") ;\nvar call6:= filter_by_substring([\"one\",\"two\",\"three\",\"four\",\"five\"],\"three\") ;\nvar call7:= filter_by_substring([\"cat\",\"bat\",\"rat\",\"mat\"],\"at\") ;\nvar call8:= filter_by_substring([\"123\",\"234\",\"345\",\"456\"],\"34\") ;\nvar call9:= filter_by_substring([\"cloud\",\"loud\",\"proud\",\"sound\"],\"ou\") ;\nexpect call0==[\"apple\",\"banana\",\"date\"];\nexpect call1==[\"hello\",\"world\",\"python\",\"code\"];\nexpect call2==[];\nexpect call3==[\"substring\"];\nexpect call4==[\"example\",\"sample\"];\nexpect call5==[];\nexpect call6==[\"three\"];\nexpect call7==[\"cat\",\"bat\",\"rat\",\"mat\"];\nexpect call8==[\"234\",\"345\"];\nexpect call9==[\"cloud\",\"loud\",\"proud\",\"sound\"];\n}\n"
    },
    "HumanEval/8": {
        "TestCase": "method{:test} check(){\nvar call0:= sum_product([1,2,3,4]) ;\nvar call1:= sum_product([0,0,0]) ;\nvar call2:= sum_product([5]) ;\nvar call3:= sum_product([-1,-2,-3]) ;\nvar call4:= sum_product([1,-1,2,-2]) ;\nvar call5:= sum_product([10,20,30]) ;\nvar call6:= sum_product([]) ;\nvar call7:= sum_product([1,0,3,4]) ;\nvar call8:= sum_product([100,200,300,400,500]) ;\nvar call9:= sum_product([-1,1,-2,2,-3,3]) ;\nexpect call0==(10,24);\nexpect call1==(0,0);\nexpect call2==(5,5);\nexpect call3==(-6,-6);\nexpect call4==(0,4);\nexpect call5==(60,6000);\nexpect call6==(0,1);\nexpect call7==(8,0);\nexpect call8==(1500,1200000000000);\nexpect call9==(0,-36);\n}\n"
    },
    "HumanEval/9": {
        "TestCase": "method{:test} check(){\nvar call0:= rolling_max([1,2,3,2,3,4,2]) ;\nvar call1:= rolling_max([5,4,3,2,1]) ;\nvar call2:= rolling_max([10,20,30,40,50]) ;\nvar call3:= rolling_max([7,7,7,7,7]) ;\nvar call4:= rolling_max([1]) ;\nvar call5:= rolling_max([100,200,150,250,300]) ;\nvar call6:= rolling_max([-1,-2,-3,-4,-5]) ;\nvar call7:= rolling_max([3,3,2,2,1,1]) ;\nvar call8:= rolling_max([-10,0,5,-7,12]) ;\nvar call9:= rolling_max([0,0,0,0,1]) ;\nexpect call0==[1,2,3,3,3,4,4];\nexpect call1==[5,5,5,5,5];\nexpect call2==[10,20,30,40,50];\nexpect call3==[7,7,7,7,7];\nexpect call4==[1];\nexpect call5==[100,200,200,250,300];\nexpect call6==[-1,-1,-1,-1,-1];\nexpect call7==[3,3,3,3,3,3];\nexpect call8==[-10,0,5,5,12];\nexpect call9==[0,0,0,0,1];\n}\n"
    },
    "HumanEval/10": {
        "TestCase": ""
    },
    "HumanEval/11": {
        "TestCase": ""
    },
    "HumanEval/12": {
        "TestCase": ""
    },
    "HumanEval/13": {
        "TestCase": "method{:test} check(){\nvar call0:= greatest_common_divisor(3,5) ;\nvar call1:= greatest_common_divisor(25,15) ;\nvar call2:= greatest_common_divisor(12,18) ;\nvar call3:= greatest_common_divisor(101,103) ;\nvar call4:= greatest_common_divisor(48,180) ;\nvar call5:= greatest_common_divisor(7,13) ;\nvar call6:= greatest_common_divisor(56,98) ;\nvar call7:= greatest_common_divisor(270,192) ;\nvar call8:= greatest_common_divisor(81,27) ;\nvar call9:= greatest_common_divisor(64,256) ;\nexpect call0==1;\nexpect call1==5;\nexpect call2==6;\nexpect call3==1;\nexpect call4==12;\nexpect call5==1;\nexpect call6==14;\nexpect call7==6;\nexpect call8==27;\nexpect call9==64;\n}\n"
    },
    "HumanEval/14": {
        "TestCase": ""
    },
    "HumanEval/15": {
        "TestCase": ""
    },
    "HumanEval/16": {
        "TestCase": "method{:test} check(){\nvar call0:= count_distinct_characters(\"xyzXYZ\") ;\nvar call1:= count_distinct_characters(\"Jerry\") ;\nvar call2:= count_distinct_characters(\"hello world!\") ;\nvar call3:= count_distinct_characters(\"123ABCabc\") ;\nvar call4:= count_distinct_characters(\"AaBbCcDdEeFfGg\") ;\nvar call5:= count_distinct_characters(\"!!!@@@###$$$\") ;\nvar call6:= count_distinct_characters(\"python is fun\") ;\nvar call7:= count_distinct_characters(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") ;\nvar call8:= count_distinct_characters(\"aA bB cC dD\") ;\nvar call9:= count_distinct_characters(\"\") ;\nexpect call0==3;\nexpect call1==4;\nexpect call2==9;\nexpect call3==6;\nexpect call4==7;\nexpect call5==4;\nexpect call6==11;\nexpect call7==26;\nexpect call8==5;\nexpect call9==0;\n}\n"
    },
    "HumanEval/17": {
        "TestCase": "method{:test} check(){\nvar call0:= parse_music(\"o o| o o\") ;\nvar call1:= parse_music(\"o| o| .| .| o\") ;\nvar call2:= parse_music(\"o .| o o o| .|\") ;\nvar call3:= parse_music(\".| .| .| .| o o|\") ;\nvar call4:= parse_music(\"o| o| o o o .| .|\") ;\nvar call5:= parse_music(\"o o o o\") ;\nvar call6:= parse_music(\"o| .| .| o| o\") ;\nvar call7:= parse_music(\"o| .| .| .| o o| .|\") ;\nvar call8:= parse_music(\"o o| o| .| o .| .| o\") ;\nvar call9:= parse_music(\"o| .| o| .| o| .| .| o\") ;\nexpect call0==[4,2,4,4];\nexpect call1==[2,2,1,1,4];\nexpect call2==[4,1,4,4,2,1];\nexpect call3==[1,1,1,1,4,2];\nexpect call4==[2,2,4,4,4,1,1];\nexpect call5==[4,4,4,4];\nexpect call6==[2,1,1,2,4];\nexpect call7==[2,1,1,1,4,2,1];\nexpect call8==[4,2,2,1,4,1,1,4];\nexpect call9==[2,1,2,1,2,1,1,4];\n}\n"
    },
    "HumanEval/18": {
        "TestCase": ""
    },
    "HumanEval/19": {
        "TestCase": ""
    },
    "HumanEval/20": {
        "TestCase": "method{:test} check(){\nvar call0:= find_closest_elements([1.00000000,2.00000000,3.00000000,4.00000000,5.00000000,2.20000000]) ;\nvar call1:= find_closest_elements([10.00000000,10.01000000,20.00000000,30.00000000,40.00000000]) ;\nvar call2:= find_closest_elements([0.10000000,0.20000000,0.30000000,0.50000000,0.45000000]) ;\nvar call3:= find_closest_elements([100.10000000,100.20000000,100.30000000,200.00000000,300.00000000]) ;\nvar call4:= find_closest_elements([5.00000000,10.00000000,15.00000000,5.50000000,50.00000000]) ;\nvar call5:= find_closest_elements([4.50000000,4.51000000,4.49000000,6.00000000,10.00000000]) ;\nvar call6:= find_closest_elements([-5.00000000,-10.00000000,-6.00000000,-5.10000000,0.00000000]) ;\nvar call7:= find_closest_elements([3.90000000,4.00000000,4.01000000,7.00000000,10.00000000]) ;\nvar call8:= find_closest_elements([500.00000000,500.01000000,1000.00000000,2000.00000000]) ;\nvar call9:= find_closest_elements([1.10000000,1.09000000,2.00000000,3.00000000,4.00000000]) ;\nexpect call0==(2.00000000,2.20000000);\nexpect call1==(10.00000000,10.01000000);\nexpect call2==(0.45000000,0.50000000);\nexpect call3==(100.20000000,100.30000000);\nexpect call4==(5.00000000,5.50000000);\nexpect call5==(4.50000000,4.51000000);\nexpect call6==(-5.10000000,-5.00000000);\nexpect call7==(4.00000000,4.01000000);\nexpect call8==(500.00000000,500.01000000);\nexpect call9==(1.09000000,1.10000000);\n}\n"
    },
    "HumanEval/21": {
        "TestCase": "method{:test} check(){\nvar call0:= rescale_to_unit([1.00000000,2.00000000,3.00000000,4.00000000,5.00000000]) ;\nvar call1:= rescale_to_unit([10.50000000,7.20000000,8.80000000,5.50000000,6.30000000]) ;\nvar call2:= rescale_to_unit([0.00000000,10.00000000]) ;\nvar call3:= rescale_to_unit([-5.00000000,-3.00000000,-10.00000000,-2.00000000]) ;\nvar call4:= rescale_to_unit([100.00000000,500.00000000,1000.00000000,2000.00000000]) ;\nvar call5:= rescale_to_unit([1.00000000,1.00000000,1.00000000,10.00000000,10.00000000]) ;\nvar call6:= rescale_to_unit([0.10000000,0.20000000,0.30000000,0.40000000,0.50000000,0.60000000]) ;\nvar call7:= rescale_to_unit([0.00000000,0.00000000,1.00000000,1.00000000]) ;\nvar call8:= rescale_to_unit([3.50000000,3.50000000,7.20000000,7.20000000,10.00000000]) ;\nvar call9:= rescale_to_unit([-100.00000000,0.00000000,100.00000000,-50.00000000,50.00000000]) ;\nexpect call0==[0.00000000,0.25000000,0.50000000,0.75000000,1.00000000];\nexpect call1==[1.00000000,0.34000000,0.66000000,0.00000000,0.16000000];\nexpect call2==[0.00000000,1.00000000];\nexpect call3==[0.62500000,0.87500000,0.00000000,1.00000000];\nexpect call4==[0.00000000,0.21052632,0.47368421,1.00000000];\nexpect call5==[0.00000000,0.00000000,0.00000000,1.00000000,1.00000000];\nexpect call6==[0.00000000,0.20000000,0.40000000,0.60000000,0.80000000,1.00000000];\nexpect call7==[0.00000000,0.00000000,1.00000000,1.00000000];\nexpect call8==[0.00000000,0.00000000,0.56923077,0.56923077,1.00000000];\nexpect call9==[0.00000000,0.50000000,1.00000000,0.25000000,0.75000000];\n}\n"
    },
    "HumanEval/22": {
        "TestCase": "method{:test} check(){\nvar call0:= filter_integers([\"a\",3.14000000,5]) ;\nvar call1:= filter_integers([1,2,3,\"abc\",map[],[]]) ;\nvar call2:= filter_integers([\"100\",100,-50,0.00000000,true]) ;\nvar call3:= filter_integers([None,42,\"42\",3.14159000,-7]) ;\nvar call4:= filter_integers([[],map[],(),0,-5,10]) ;\nvar call5:= filter_integers([\"\",\"hello\",0,1,2,false]) ;\nvar call6:= filter_integers([100000,-100000,3.14000000,2.71000000,[],map[]]) ;\nvar call7:= filter_integers([true,false,1,0,-1,\"yes\",\"no\"]) ;\nvar call8:= filter_integers([b'byte',256,1024,-1024,None,3j]) ;\nvar call9:= filter_integers([999,\"string\",-6,7.50000000,map[],(3+4j)]) ;\nexpect call0==[5];\nexpect call1==[1,2,3];\nexpect call2==[100,-50,true];\nexpect call3==[42,-7];\nexpect call4==[0,-5,10];\nexpect call5==[0,1,2,false];\nexpect call6==[100000,-100000];\nexpect call7==[true,false,1,0,-1];\nexpect call8==[256,1024,-1024];\nexpect call9==[999,-6];\n}\n"
    },
    "HumanEval/23": {
        "TestCase": ""
    },
    "HumanEval/24": {
        "TestCase": "method{:test} check(){\nvar call0:= largest_divisor(15) ;\nvar call1:= largest_divisor(28) ;\nvar call2:= largest_divisor(6) ;\nvar call3:= largest_divisor(100) ;\nvar call4:= largest_divisor(49) ;\nvar call5:= largest_divisor(81) ;\nvar call6:= largest_divisor(22) ;\nvar call7:= largest_divisor(13) ;\nvar call8:= largest_divisor(72) ;\nvar call9:= largest_divisor(7) ;\nexpect call0==5;\nexpect call1==14;\nexpect call2==3;\nexpect call3==50;\nexpect call4==7;\nexpect call5==27;\nexpect call6==11;\nexpect call7==1;\nexpect call8==36;\nexpect call9==1;\n}\n"
    },
    "HumanEval/25": {
        "TestCase": "method{:test} check(){\nvar call0:= factorize(1) ;\nvar call1:= factorize(2) ;\nvar call2:= factorize(3) ;\nvar call3:= factorize(4) ;\nvar call4:= factorize(15) ;\nvar call5:= factorize(49) ;\nvar call6:= factorize(101) ;\nvar call7:= factorize(1024) ;\nvar call8:= factorize(210) ;\nvar call9:= factorize(123456) ;\nexpect call0==[];\nexpect call1==[2];\nexpect call2==[3];\nexpect call3==[2,2];\nexpect call4==[3,5];\nexpect call5==[7,7];\nexpect call6==[101];\nexpect call7==[2,2,2,2,2,2,2,2,2,2];\nexpect call8==[2,3,5,7];\nexpect call9==[2,2,2,2,2,2,3,643];\n}\n"
    },
    "HumanEval/26": {
        "TestCase": "method{:test} check(){\nvar call0:= remove_duplicates([1,2,3,2,4]) ;\nvar call1:= remove_duplicates([5,6,7,8,9]) ;\nvar call2:= remove_duplicates([10,10,11,12,11]) ;\nvar call3:= remove_duplicates([1,1,1,1]) ;\nvar call4:= remove_duplicates([13,14,15]) ;\nvar call5:= remove_duplicates([16,17,18,16,19,16]) ;\nvar call6:= remove_duplicates([20]) ;\nvar call7:= remove_duplicates([21,21,22,23,22]) ;\nvar call8:= remove_duplicates([]) ;\nvar call9:= remove_duplicates([24,25,26,27,26,24,28]) ;\nexpect call0==[1,3,4];\nexpect call1==[5,6,7,8,9];\nexpect call2==[12];\nexpect call3==[];\nexpect call4==[13,14,15];\nexpect call5==[17,18,19];\nexpect call6==[20];\nexpect call7==[23];\nexpect call8==[];\nexpect call9==[25,27,28];\n}\n"
    },
    "HumanEval/27": {
        "TestCase": ""
    },
    "HumanEval/28": {
        "TestCase": ""
    },
    "HumanEval/29": {
        "TestCase": "method{:test} check(){\nvar call0:= filter_by_prefix([\"abc\",\"bcd\",\"cde\",\"array\"],\"a\") ;\nvar call1:= filter_by_prefix([\"apple\",\"banana\",\"apricot\",\"blueberry\"],\"ap\") ;\nvar call2:= filter_by_prefix([\"dog\",\"cat\",\"deer\",\"canary\"],\"d\") ;\nvar call3:= filter_by_prefix([],\"z\") ;\nvar call4:= filter_by_prefix([\"python\",\"java\",\"javascript\",\"jupyter\"],\"jav\") ;\nvar call5:= filter_by_prefix([\"strawberry\",\"blueberry\",\"blackberry\",\"berry\"],\"berry\") ;\nvar call6:= filter_by_prefix([\"\",\"empty\",\"endless\",\"entry\"],\"e\") ;\nvar call7:= filter_by_prefix([\"foobar\",\"foo\",\"bar\",\"baz\"],\"foo\") ;\nvar call8:= filter_by_prefix([\"prefix\",\"preliminary\",\"preview\",\"prevent\"],\"pre\") ;\nvar call9:= filter_by_prefix([\"one\",\"two\",\"three\",\"twenty\"],\"t\") ;\nexpect call0==[\"abc\",\"array\"];\nexpect call1==[\"apple\",\"apricot\"];\nexpect call2==[\"dog\",\"deer\"];\nexpect call3==[];\nexpect call4==[\"java\",\"javascript\"];\nexpect call5==[\"berry\"];\nexpect call6==[\"empty\",\"endless\",\"entry\"];\nexpect call7==[\"foobar\",\"foo\"];\nexpect call8==[\"prefix\",\"preliminary\",\"preview\",\"prevent\"];\nexpect call9==[\"two\",\"three\",\"twenty\"];\n}\n"
    },
    "HumanEval/30": {
        "TestCase": "method{:test} check(){\nvar call0:= get_positive([-10,-5,0,1,2,3,4,5]) ;\nvar call1:= get_positive([0,0,0,0]) ;\nvar call2:= get_positive([100,200,300,-400,-500]) ;\nvar call3:= get_positive([-1,-2,-3,-4,-5]) ;\nvar call4:= get_positive([1,1,1,5,10,-20,-30]) ;\nvar call5:= get_positive([50,-20,0,-10,20,25]) ;\nvar call6:= get_positive([10,-10,10,-10,10]) ;\nvar call7:= get_positive([-3,-2,-1,0,5,10]) ;\nvar call8:= get_positive([999,-1000,0,1000]) ;\nvar call9:= get_positive([7,8,-9,-10,-11,12,13,14]) ;\nexpect call0==[1,2,3,4,5];\nexpect call1==[];\nexpect call2==[100,200,300];\nexpect call3==[];\nexpect call4==[1,1,1,5,10];\nexpect call5==[50,20,25];\nexpect call6==[10,10,10];\nexpect call7==[5,10];\nexpect call8==[999,1000];\nexpect call9==[7,8,12,13,14];\n}\n"
    },
    "HumanEval/31": {
        "TestCase": "method{:test} check(){\nvar call0:= is_prime(2) ;\nvar call1:= is_prime(3) ;\nvar call2:= is_prime(4) ;\nvar call3:= is_prime(17) ;\nvar call4:= is_prime(20) ;\nvar call5:= is_prime(29) ;\nvar call6:= is_prime(100) ;\nvar call7:= is_prime(101) ;\nvar call8:= is_prime(1) ;\nvar call9:= is_prime(13441) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==false;\nexpect call3==true;\nexpect call4==false;\nexpect call5==true;\nexpect call6==false;\nexpect call7==true;\nexpect call8==false;\nexpect call9==true;\n}\n"
    },
    "HumanEval/33": {
        "TestCase": "method{:test} check(){\nvar call0:= sort_third([9,5,7,1,3,2,4,8,6]) ;\nvar call1:= sort_third([]) ;\nvar call2:= sort_third([3,1,4,1,5,9,2,6,5,3,5]) ;\nvar call3:= sort_third([5,3,8,1]) ;\nvar call4:= sort_third([12,15,10,11,14,19,13,17,16,18,17,20]) ;\nvar call5:= sort_third([1]) ;\nvar call6:= sort_third([8,7,6,5,4,3,2,1]) ;\nvar call7:= sort_third([2,4,6,8,10,12,14]) ;\nvar call8:= sort_third([100,200,300,400,500,600,700,800,900]) ;\nvar call9:= sort_third([0,-1,-2,-3,-4,-5,-6,-7,-8,-9]) ;\nexpect call0==[1,5,7,4,3,2,9,8,6];\nexpect call1==[];\nexpect call2==[1,1,4,2,5,9,3,6,5,3,5];\nexpect call3==[1,3,8,5];\nexpect call4==[11,15,10,12,14,19,13,17,16,18,17,20];\nexpect call5==[1];\nexpect call6==[2,7,6,5,4,3,8,1];\nexpect call7==[2,4,6,8,10,12,14];\nexpect call8==[100,200,300,400,500,600,700,800,900];\nexpect call9==[-9,-1,-2,-6,-4,-5,-3,-7,-8,0];\n}\n"
    },
    "HumanEval/34": {
        "TestCase": "method{:test} check(){\nvar call0:= unique([1,2,3,2,1,4,5,3,6]) ;\nvar call1:= unique([10,20,30,40,10,20,50]) ;\nvar call2:= unique([0,-1,-1,-5,-3,0,2,1]) ;\nvar call3:= unique([100,100,100,100]) ;\nvar call4:= unique([]) ;\nvar call5:= unique([5,3,5,2,3,8,9,9,12]) ;\nvar call6:= unique([100,200,300,400,500]) ;\nvar call7:= unique([-10,0,10,20,-10,0,30]) ;\nvar call8:= unique([2,2,2,1,1]) ;\nvar call9:= unique([7,8,9,10,10,9,8,7]) ;\nexpect call0==[1,2,3,4,5,6];\nexpect call1==[10,20,30,40,50];\nexpect call2==[-5,-3,-1,0,1,2];\nexpect call3==[100];\nexpect call4==[];\nexpect call5==[2,3,5,8,9,12];\nexpect call6==[100,200,300,400,500];\nexpect call7==[-10,0,10,20,30];\nexpect call8==[1,2];\nexpect call9==[7,8,9,10];\n}\n"
    },
    "HumanEval/35": {
        "TestCase": "method{:test} check(){\nvar call0:= max_element([1,2,3]) ;\nvar call1:= max_element([5,3,-5,2,-3,3,9,0,123,1,-10]) ;\nvar call2:= max_element([0]) ;\nvar call3:= max_element([-10,-20,-30,-5,-1]) ;\nvar call4:= max_element([100,200,300,400,500,600]) ;\nvar call5:= max_element([7,7,7,7,7]) ;\nvar call6:= max_element([3.20000000,1.50000000,9.80000000,7.10000000]) ;\nvar call7:= max_element([1000000,500000,250000,125000,62500]) ;\nvar call8:= max_element([-0.50000000,-1.20000000,-0.10000000,-3.40000000,-0.01000000]) ;\nvar call9:= max_element([1,-1,0,1.10000000,-1.10000000,0.50000000]) ;\nexpect call0==3;\nexpect call1==123;\nexpect call2==0;\nexpect call3==-1;\nexpect call4==600;\nexpect call5==7;\nexpect call6==9.80000000;\nexpect call7==1000000;\nexpect call8==-0.01000000;\nexpect call9==1.10000000;\n}\n"
    },
    "HumanEval/36": {
        "TestCase": "method{:test} check(){\nvar call0:= fizz_buzz(10) ;\nvar call1:= fizz_buzz(20) ;\nvar call2:= fizz_buzz(50) ;\nvar call3:= fizz_buzz(100) ;\nvar call4:= fizz_buzz(150) ;\nvar call5:= fizz_buzz(200) ;\nvar call6:= fizz_buzz(250) ;\nvar call7:= fizz_buzz(300) ;\nvar call8:= fizz_buzz(350) ;\nvar call9:= fizz_buzz(400) ;\nexpect call0==0;\nexpect call1==0;\nexpect call2==0;\nexpect call3==3;\nexpect call4==4;\nexpect call5==6;\nexpect call6==7;\nexpect call7==10;\nexpect call8==10;\nexpect call9==13;\n}\n"
    },
    "HumanEval/37": {
        "TestCase": "method{:test} check(){\nvar call0:= sort_even([1,2,3]) ;\nvar call1:= sort_even([5,6,7,8]) ;\nvar call2:= sort_even([10,3,8,1,6]) ;\nvar call3:= sort_even([0,9,5,2,3,4]) ;\nvar call4:= sort_even([-2,-3,-8,-1,-5]) ;\nvar call5:= sort_even([100]) ;\nvar call6:= sort_even([25,30,15,20]) ;\nvar call7:= sort_even([4,3,2,1]) ;\nvar call8:= sort_even([0,-1,2,-3,4,-5]) ;\nvar call9:= sort_even([7,2,9,1,8,3,5]) ;\nexpect call0==[1,2,3];\nexpect call1==[5,6,7,8];\nexpect call2==[6,3,8,1,10];\nexpect call3==[0,9,3,2,5,4];\nexpect call4==[-8,-3,-5,-1,-2];\nexpect call5==[100];\nexpect call6==[15,30,25,20];\nexpect call7==[2,3,4,1];\nexpect call8==[0,-1,2,-3,4,-5];\nexpect call9==[5,2,7,1,8,3,9];\n}\n"
    },
    "HumanEval/39": {
        "TestCase": "method{:test} check(){\nvar call0:= prime_fib(1) ;\nvar call1:= prime_fib(2) ;\nvar call2:= prime_fib(3) ;\nvar call3:= prime_fib(4) ;\nvar call4:= prime_fib(5) ;\nvar call5:= prime_fib(6) ;\nvar call6:= prime_fib(7) ;\nvar call7:= prime_fib(8) ;\nvar call8:= prime_fib(9) ;\nvar call9:= prime_fib(10) ;\nexpect call0==2;\nexpect call1==3;\nexpect call2==5;\nexpect call3==13;\nexpect call4==89;\nexpect call5==233;\nexpect call6==1597;\nexpect call7==28657;\nexpect call8==514229;\nexpect call9==433494437;\n}\n"
    },
    "HumanEval/40": {
        "TestCase": "method{:test} check(){\nvar call0:= triples_sum_to_zero([1,-1,0]) ;\nvar call1:= triples_sum_to_zero([3,-4,1,0]) ;\nvar call2:= triples_sum_to_zero([7,2,-9,0,1]) ;\nvar call3:= triples_sum_to_zero([5,-5,10,-2]) ;\nvar call4:= triples_sum_to_zero([2,3,-6,4]) ;\nvar call5:= triples_sum_to_zero([0,0,0]) ;\nvar call6:= triples_sum_to_zero([1,1,-2,3,-3]) ;\nvar call7:= triples_sum_to_zero([10,12,-22,-10]) ;\nvar call8:= triples_sum_to_zero([8,-8,16,-4]) ;\nvar call9:= triples_sum_to_zero([4,-4,3,-7,0]) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==false;\nexpect call4==true;\nexpect call5==true;\nexpect call6==true;\nexpect call7==true;\nexpect call8==false;\nexpect call9==true;\n}\n"
    },
    "HumanEval/41": {
        "TestCase": "method{:test} check(){\nvar call0:= car_race_collision(0) ;\nvar call1:= car_race_collision(1) ;\nvar call2:= car_race_collision(2) ;\nvar call3:= car_race_collision(3) ;\nvar call4:= car_race_collision(4) ;\nvar call5:= car_race_collision(5) ;\nvar call6:= car_race_collision(10) ;\nvar call7:= car_race_collision(50) ;\nvar call8:= car_race_collision(100) ;\nvar call9:= car_race_collision(1000) ;\nexpect call0==0;\nexpect call1==1;\nexpect call2==4;\nexpect call3==9;\nexpect call4==16;\nexpect call5==25;\nexpect call6==100;\nexpect call7==2500;\nexpect call8==10000;\nexpect call9==1000000;\n}\n"
    },
    "HumanEval/42": {
        "TestCase": "method{:test} check(){\nvar call0:= incr_list([1,2,3]) ;\nvar call1:= incr_list([5,3,5,2,3,3,9,0,123]) ;\nvar call2:= incr_list([0,-1,-5,-10]) ;\nvar call3:= incr_list([100,200,300,400]) ;\nvar call4:= incr_list([1]) ;\nvar call5:= incr_list([]) ;\nvar call6:= incr_list([7,14,21,28,35]) ;\nvar call7:= incr_list([0]) ;\nvar call8:= incr_list([-1000,0,1000,-500,500]) ;\nvar call9:= incr_list([42,-42,0,123456,-123456]) ;\nexpect call0==[2,3,4];\nexpect call1==[6,4,6,3,4,4,10,1,124];\nexpect call2==[1,0,-4,-9];\nexpect call3==[101,201,301,401];\nexpect call4==[2];\nexpect call5==[];\nexpect call6==[8,15,22,29,36];\nexpect call7==[1];\nexpect call8==[-999,1,1001,-499,501];\nexpect call9==[43,-41,1,123457,-123455];\n}\n"
    },
    "HumanEval/43": {
        "TestCase": "method{:test} check(){\nvar call0:= pairs_sum_to_zero([0,1,-1]) ;\nvar call1:= pairs_sum_to_zero([2,4,-5,5,7]) ;\nvar call2:= pairs_sum_to_zero([1,2,-2,3]) ;\nvar call3:= pairs_sum_to_zero([3,7,-3,1,-7]) ;\nvar call4:= pairs_sum_to_zero([1,3,5,-6,-3]) ;\nvar call5:= pairs_sum_to_zero([0,0]) ;\nvar call6:= pairs_sum_to_zero([1,3,-1,-3]) ;\nvar call7:= pairs_sum_to_zero([1,2,3,4,5]) ;\nvar call8:= pairs_sum_to_zero([-7,7,-3,3]) ;\nvar call9:= pairs_sum_to_zero([1]) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==true;\nexpect call6==true;\nexpect call7==false;\nexpect call8==true;\nexpect call9==false;\n}\n"
    },
    "HumanEval/45": {
        "TestCase": "method{:test} check(){\nvar call0:= triangle_area(5,3) ;\nvar call1:= triangle_area(10,5) ;\nvar call2:= triangle_area(7,4.50000000) ;\nvar call3:= triangle_area(12.50000000,8) ;\nvar call4:= triangle_area(3.10000000,9.70000000) ;\nvar call5:= triangle_area(6,11.20000000) ;\nvar call6:= triangle_area(15.40000000,2.20000000) ;\nvar call7:= triangle_area(2.50000000,7.50000000) ;\nvar call8:= triangle_area(8,13) ;\nvar call9:= triangle_area(4.80000000,6.30000000) ;\nexpect call0==7.50000000;\nexpect call1==25.00000000;\nexpect call2==15.75000000;\nexpect call3==50.00000000;\nexpect call4==15.03500000;\nexpect call5==33.60000000;\nexpect call6==16.94000000;\nexpect call7==9.37500000;\nexpect call8==52.00000000;\nexpect call9==15.12000000;\n}\n"
    },
    "HumanEval/46": {
        "TestCase": "method{:test} check(){\nvar call0:= fib4(0) ;\nvar call1:= fib4(1) ;\nvar call2:= fib4(2) ;\nvar call3:= fib4(3) ;\nvar call4:= fib4(4) ;\nvar call5:= fib4(10) ;\nvar call6:= fib4(20) ;\nvar call7:= fib4(30) ;\nvar call8:= fib4(50) ;\nvar call9:= fib4(100) ;\nexpect call0==0;\nexpect call1==0;\nexpect call2==2;\nexpect call3==0;\nexpect call4==2;\nexpect call5==104;\nexpect call6==73552;\nexpect call7==52080824;\nexpect call8==26112283777288;\nexpect call9==4647959998589498844128566416;\n}\n"
    },
    "HumanEval/47": {
        "TestCase": "method{:test} check(){\nvar call0:= median([3,1,2,4,5]) ;\nvar call1:= median([10,20,30,40,50,60]) ;\nvar call2:= median([7,3,1]) ;\nvar call3:= median([-100,-50,-25,-10,0,10]) ;\nvar call4:= median([5.50000000,2.20000000,3.30000000]) ;\nvar call5:= median([100]) ;\nvar call6:= median([1,2,3,4]) ;\nvar call7:= median([0,0,0,0,0]) ;\nvar call8:= median([8,7,6,5,4,3,2,1]) ;\nvar call9:= median([1.10000000,2.20000000,3.30000000,4.40000000,5.50000000]) ;\nexpect call0==3;\nexpect call1==35.00000000;\nexpect call2==3;\nexpect call3==-17.50000000;\nexpect call4==3.30000000;\nexpect call5==100;\nexpect call6==2.50000000;\nexpect call7==0;\nexpect call8==4.50000000;\nexpect call9==3.30000000;\n}\n"
    },
    "HumanEval/48": {
        "TestCase": "method{:test} check(){\nvar call0:= is_palindrome(\"racecar\") ;\nvar call1:= is_palindrome(\"level\") ;\nvar call2:= is_palindrome(\"palindrome\") ;\nvar call3:= is_palindrome(\"madam\") ;\nvar call4:= is_palindrome(\"12321\") ;\nvar call5:= is_palindrome(\"hello\") ;\nvar call6:= is_palindrome(\"a\") ;\nvar call7:= is_palindrome(\"abcdcba\") ;\nvar call8:= is_palindrome(\"testset\") ;\nvar call9:= is_palindrome(\"\") ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==false;\nexpect call3==true;\nexpect call4==true;\nexpect call5==false;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/49": {
        "TestCase": "method{:test} check(){\nvar call0:= modp(3,5) ;\nvar call1:= modp(1101,101) ;\nvar call2:= modp(0,101) ;\nvar call3:= modp(3,11) ;\nvar call4:= modp(100,101) ;\nvar call5:= modp(50,13) ;\nvar call6:= modp(256,17) ;\nvar call7:= modp(7,19) ;\nvar call8:= modp(1024,31) ;\nvar call9:= modp(20,23) ;\nexpect call0==3;\nexpect call1==2;\nexpect call2==1;\nexpect call3==8;\nexpect call4==1;\nexpect call5==4;\nexpect call6==1;\nexpect call7==14;\nexpect call8==16;\nexpect call9==6;\n}\n"
    },
    "HumanEval/51": {
        "TestCase": ""
    },
    "HumanEval/52": {
        "TestCase": "method{:test} check(){\nvar call0:= below_threshold([1,2,3,4],5) ;\nvar call1:= below_threshold([0,-1,-2,-3],0) ;\nvar call2:= below_threshold([99,100,101],150) ;\nvar call3:= below_threshold([10,20,30],25) ;\nvar call4:= below_threshold([5,5,5,5],6) ;\nvar call5:= below_threshold([10,15],10) ;\nvar call6:= below_threshold([],1) ;\nvar call7:= below_threshold([100,200,300],300) ;\nvar call8:= below_threshold([0,0,0],1) ;\nvar call9:= below_threshold([1000],999) ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==true;\nexpect call3==false;\nexpect call4==true;\nexpect call5==false;\nexpect call6==true;\nexpect call7==false;\nexpect call8==true;\nexpect call9==false;\n}\n"
    },
    "HumanEval/54": {
        "TestCase": "method{:test} check(){\nvar call0:= same_chars(\"abc\",\"cab\") ;\nvar call1:= same_chars(\"hello\",\"olelh\") ;\nvar call2:= same_chars(\"test\",\"sett\") ;\nvar call3:= same_chars(\"abcd\",\"dcba\") ;\nvar call4:= same_chars(\"xyz\",\"zyx\") ;\nvar call5:= same_chars(\"python\",\"tonpyh\") ;\nvar call6:= same_chars(\"samechars\",\"sarsmcahe\") ;\nvar call7:= same_chars(\"abcd\",\"abcde\") ;\nvar call8:= same_chars(\"abcdef\",\"bcdeaf\") ;\nvar call9:= same_chars(\"aaagh\",\"hgaaa\") ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==true;\nexpect call6==true;\nexpect call7==false;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/55": {
        "TestCase": "method{:test} check(){\nvar call0:= fib(0) ;\nvar call1:= fib(1) ;\nvar call2:= fib(2) ;\nvar call3:= fib(5) ;\nvar call4:= fib(10) ;\nvar call5:= fib(15) ;\nvar call6:= fib(20) ;\nvar call7:= fib(25) ;\nvar call8:= fib(30) ;\nvar call9:= fib(35) ;\nexpect call0==0;\nexpect call1==1;\nexpect call2==1;\nexpect call3==5;\nexpect call4==55;\nexpect call5==610;\nexpect call6==6765;\nexpect call7==75025;\nexpect call8==832040;\nexpect call9==9227465;\n}\n"
    },
    "HumanEval/56": {
        "TestCase": "method{:test} check(){\nvar call0:= correct_bracketing(\"<>\") ;\nvar call1:= correct_bracketing(\"<<>>\") ;\nvar call2:= correct_bracketing(\"<><><>\") ;\nvar call3:= correct_bracketing(\"<<<<>>>>\") ;\nvar call4:= correct_bracketing(\"><\") ;\nvar call5:= correct_bracketing(\"<<>><<<>>>\") ;\nvar call6:= correct_bracketing(\"<><<>>\") ;\nvar call7:= correct_bracketing(\"<<><>\") ;\nvar call8:= correct_bracketing(\">\") ;\nvar call9:= correct_bracketing(\"\") ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==false;\nexpect call5==true;\nexpect call6==true;\nexpect call7==false;\nexpect call8==false;\nexpect call9==true;\n}\n"
    },
    "HumanEval/57": {
        "TestCase": "method{:test} check(){\nvar call0:= monotonic([1,2,3,4,5]) ;\nvar call1:= monotonic([5,4,3,2,1]) ;\nvar call2:= monotonic([10,20,30,40]) ;\nvar call3:= monotonic([100,50,20,10]) ;\nvar call4:= monotonic([1,1,1,1]) ;\nvar call5:= monotonic([7,8,8,9]) ;\nvar call6:= monotonic([3,1,4,2]) ;\nvar call7:= monotonic([1]) ;\nvar call8:= monotonic([2,3]) ;\nvar call9:= monotonic([10,20,15,30]) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==true;\nexpect call6==false;\nexpect call7==true;\nexpect call8==true;\nexpect call9==false;\n}\n"
    },
    "HumanEval/58": {
        "TestCase": "method{:test} check(){\nvar call0:= common([1,4,3,34,653,2,5],[5,7,1,5,9,653,121]) ;\nvar call1:= common([5,3,2,8],[3,2]) ;\nvar call2:= common([10,20,30,40],[15,25,30,40,50]) ;\nvar call3:= common([1,2,3,4],[5,6,7,8]) ;\nvar call4:= common([],[1,2,3]) ;\nvar call5:= common([100,200,300],[]) ;\nvar call6:= common([11,22,33],[33,44,55]) ;\nvar call7:= common([1,1,2,2,3,3],[2,3,4,4]) ;\nvar call8:= common([0,-1,-2,3],[-2,0,-5,6]) ;\nvar call9:= common([1000,2000,3000,4000],[3000,4000,5000,6000]) ;\nexpect call0==[1,5,653];\nexpect call1==[2,3];\nexpect call2==[30,40];\nexpect call3==[];\nexpect call4==[];\nexpect call5==[];\nexpect call6==[33];\nexpect call7==[2,3];\nexpect call8==[-2,0];\nexpect call9==[3000,4000];\n}\n"
    },
    "HumanEval/59": {
        "TestCase": "method{:test} check(){\nvar call0:= largest_prime_factor(13195) ;\nvar call1:= largest_prime_factor(2048) ;\nvar call2:= largest_prime_factor(100) ;\nvar call3:= largest_prime_factor(999) ;\nvar call4:= largest_prime_factor(4620) ;\nvar call5:= largest_prime_factor(60085) ;\nvar call6:= largest_prime_factor(123456) ;\nvar call7:= largest_prime_factor(98765) ;\nvar call8:= largest_prime_factor(75319) ;\nvar call9:= largest_prime_factor(45000) ;\nexpect call0==29;\nexpect call1==2;\nexpect call2==5;\nexpect call3==37;\nexpect call4==11;\nexpect call5==197;\nexpect call6==643;\nexpect call7==19753;\nexpect call8==691;\nexpect call9==5;\n}\n"
    },
    "HumanEval/60": {
        "TestCase": "method{:test} check(){\nvar call0:= sum_to_n(15) ;\nvar call1:= sum_to_n(50) ;\nvar call2:= sum_to_n(25) ;\nvar call3:= sum_to_n(1) ;\nvar call4:= sum_to_n(100) ;\nvar call5:= sum_to_n(0) ;\nvar call6:= sum_to_n(500) ;\nvar call7:= sum_to_n(3) ;\nvar call8:= sum_to_n(20) ;\nvar call9:= sum_to_n(75) ;\nexpect call0==120;\nexpect call1==1275;\nexpect call2==325;\nexpect call3==1;\nexpect call4==5050;\nexpect call5==0;\nexpect call6==125250;\nexpect call7==6;\nexpect call8==210;\nexpect call9==2850;\n}\n"
    },
    "HumanEval/61": {
        "TestCase": "method{:test} check(){\nvar call0:= correct_bracketing(\"()\") ;\nvar call1:= correct_bracketing(\"(\") ;\nvar call2:= correct_bracketing(\"(()))\") ;\nvar call3:= correct_bracketing(\"((())())\") ;\nvar call4:= correct_bracketing(\"\") ;\nvar call5:= correct_bracketing(\")(\") ;\nvar call6:= correct_bracketing(\"(()\") ;\nvar call7:= correct_bracketing(\"())\") ;\nvar call8:= correct_bracketing(\"()\") ;\nvar call9:= correct_bracketing(\"()()()()\") ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==false;\nexpect call3==true;\nexpect call4==true;\nexpect call5==false;\nexpect call6==false;\nexpect call7==false;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/62": {
        "TestCase": "method{:test} check(){\nvar call0:= derivative([3,1,2,4,5]) ;\nvar call1:= derivative([1,2,3]) ;\nvar call2:= derivative([0,0,0,0]) ;\nvar call3:= derivative([5,10,15]) ;\nvar call4:= derivative([7]) ;\nvar call5:= derivative([0,3,5,7,9,11]) ;\nvar call6:= derivative([2,4,6,8]) ;\nvar call7:= derivative([1,-1,1,-1,1,-1]) ;\nvar call8:= derivative([100,200,300,400,500,600,700]) ;\nvar call9:= derivative([-3,-2,-1,0,1,2,3]) ;\nexpect call0==[1,4,12,20];\nexpect call1==[2,6];\nexpect call2==[0,0,0];\nexpect call3==[10,30];\nexpect call4==[];\nexpect call5==[3,10,21,36,55];\nexpect call6==[4,12,24];\nexpect call7==[-1,2,-3,4,-5];\nexpect call8==[200,600,1200,2000,3000,4200];\nexpect call9==[-2,-2,0,4,10,18];\n}\n"
    },
    "HumanEval/63": {
        "TestCase": "method{:test} check(){\nvar call0:= fibfib(0) ;\nvar call1:= fibfib(1) ;\nvar call2:= fibfib(2) ;\nvar call3:= fibfib(3) ;\nvar call4:= fibfib(4) ;\nvar call5:= fibfib(5) ;\nvar call6:= fibfib(6) ;\nvar call7:= fibfib(7) ;\nvar call8:= fibfib(8) ;\nvar call9:= fibfib(9) ;\nexpect call0==0;\nexpect call1==0;\nexpect call2==1;\nexpect call3==1;\nexpect call4==2;\nexpect call5==4;\nexpect call6==7;\nexpect call7==13;\nexpect call8==24;\nexpect call9==44;\n}\n"
    },
    "HumanEval/64": {
        "TestCase": "method{:test} check(){\nvar call0:= vowels_count(\"hello\") ;\nvar call1:= vowels_count(\"world\") ;\nvar call2:= vowels_count(\"Python\") ;\nvar call3:= vowels_count(\"syzygy\") ;\nvar call4:= vowels_count(\"university\") ;\nvar call5:= vowels_count(\"AEIOU\") ;\nvar call6:= vowels_count(\"Cryptography\") ;\nvar call7:= vowels_count(\"queue\") ;\nvar call8:= vowels_count(\"try\") ;\nvar call9:= vowels_count(\"abcdefghijklmnopqrstuvwxyz\") ;\nexpect call0==2;\nexpect call1==1;\nexpect call2==1;\nexpect call3==1;\nexpect call4==5;\nexpect call5==5;\nexpect call6==3;\nexpect call7==4;\nexpect call8==1;\nexpect call9==5;\n}\n"
    },
    "HumanEval/65": {
        "TestCase": "method{:test} check(){\nvar call0:= circular_shift(12,1) ;\nvar call1:= circular_shift(12,2) ;\nvar call2:= circular_shift(12345,3) ;\nvar call3:= circular_shift(12345,5) ;\nvar call4:= circular_shift(12345,6) ;\nvar call5:= circular_shift(987654321,4) ;\nvar call6:= circular_shift(987654321,9) ;\nvar call7:= circular_shift(987654321,10) ;\nvar call8:= circular_shift(0,1) ;\nvar call9:= circular_shift(11111,2) ;\nexpect call0==21;\nexpect call1==12;\nexpect call2==34512;\nexpect call3==12345;\nexpect call4==54321;\nexpect call5==432198765;\nexpect call6==987654321;\nexpect call7==123456789;\nexpect call8==0;\nexpect call9==11111;\n}\n"
    },
    "HumanEval/66": {
        "TestCase": "method{:test} check(){\nvar call0:= digitSum(\"ABCdef\") ;\nvar call1:= digitSum(\"aBcDeFgHiJ\") ;\nvar call2:= digitSum(\"\") ;\nvar call3:= digitSum(\"OnlyUPPER\") ;\nvar call4:= digitSum(\"lowercaseonly\") ;\nvar call5:= digitSum(\"MixedCASE123\") ;\nvar call6:= digitSum(\"123UPPERlower456\") ;\nvar call7:= digitSum(\"AaAaBbBbCcCc\") ;\nvar call8:= digitSum(\"spaces IN UPPERCASE\") ;\nvar call9:= digitSum(\"Symb0ls*!UPPERS\") ;\nexpect call0==198;\nexpect call1==350;\nexpect call2==0;\nexpect call3==475;\nexpect call4==0;\nexpect call5==361;\nexpect call6==396;\nexpect call7==396;\nexpect call8==831;\nexpect call9==562;\n}\n"
    },
    "HumanEval/67": {
        "TestCase": "method{:test} check(){\nvar call0:= fruit_distribution(\"5 apples and 6 oranges\",19) ;\nvar call1:= fruit_distribution(\"2 apples and 3 oranges\",50) ;\nvar call2:= fruit_distribution(\"10 apples and 15 oranges\",45) ;\nvar call3:= fruit_distribution(\"0 apples and 0 oranges\",10) ;\nvar call4:= fruit_distribution(\"25 apples and 30 oranges\",100) ;\nvar call5:= fruit_distribution(\"100 apples and 50 oranges\",200) ;\nvar call6:= fruit_distribution(\"1 apples and 1 oranges\",5) ;\nvar call7:= fruit_distribution(\"12 apples and 8 oranges\",40) ;\nvar call8:= fruit_distribution(\"7 apples and 14 oranges\",35) ;\nvar call9:= fruit_distribution(\"0 apples and 20 oranges\",30) ;\nexpect call0==8;\nexpect call1==45;\nexpect call2==20;\nexpect call3==10;\nexpect call4==45;\nexpect call5==50;\nexpect call6==3;\nexpect call7==20;\nexpect call8==14;\nexpect call9==10;\n}\n"
    },
    "HumanEval/68": {
        "TestCase": "method{:test} check(){\nvar call0:= pluck([4,2,3]) ;\nvar call1:= pluck([1,2,3]) ;\nvar call2:= pluck([]) ;\nvar call3:= pluck([5,0,3,0,4,2]) ;\nvar call4:= pluck([1,3,5,7]) ;\nvar call5:= pluck([8,6,2,4]) ;\nvar call6:= pluck([0]) ;\nvar call7:= pluck([10,5,3,6,8]) ;\nvar call8:= pluck([12,14,16,18]) ;\nvar call9:= pluck([5,2,2,8,4]) ;\nexpect call0==[2,1];\nexpect call1==[2,1];\nexpect call2==[];\nexpect call3==[0,1];\nexpect call4==[];\nexpect call5==[2,2];\nexpect call6==[0,0];\nexpect call7==[6,3];\nexpect call8==[12,0];\nexpect call9==[2,1];\n}\n"
    },
    "HumanEval/69": {
        "TestCase": "method{:test} check(){\nvar call0:= search([4,1,2,2,3,1]) ;\nvar call1:= search([1,2,2,3,3,3,4,4,4]) ;\nvar call2:= search([5,5,4,4,4]) ;\nvar call3:= search([1,1,1,1]) ;\nvar call4:= search([6,6,6,6,6,6]) ;\nvar call5:= search([2,2,2]) ;\nvar call6:= search([3,3,3,2,2,1]) ;\nvar call7:= search([10,9,8,8,8,8,8,8]) ;\nvar call8:= search([7,7,7,5,5,5,5]) ;\nvar call9:= search([15,15,15,15,15,20,20,20]) ;\nexpect call0==2;\nexpect call1==3;\nexpect call2==-1;\nexpect call3==1;\nexpect call4==6;\nexpect call5==2;\nexpect call6==3;\nexpect call7==-1;\nexpect call8==-1;\nexpect call9==-1;\n}\n"
    },
    "HumanEval/70": {
        "TestCase": "method{:test} check(){\nvar call0:= strange_sort_list([1,2,3,4]) ;\nvar call1:= strange_sort_list([5,5,5,5]) ;\nvar call2:= strange_sort_list([]) ;\nvar call3:= strange_sort_list([10,-1,7,3]) ;\nvar call4:= strange_sort_list([0,0,0,0]) ;\nvar call5:= strange_sort_list([100]) ;\nvar call6:= strange_sort_list([-5,-10,-15,-20]) ;\nvar call7:= strange_sort_list([1,10,1,10,1,10]) ;\nvar call8:= strange_sort_list([3,3,2,2,1,1]) ;\nvar call9:= strange_sort_list([1000,2000,3000,4000,-100]) ;\nexpect call0==[1,4,2,3];\nexpect call1==[5,5,5,5];\nexpect call2==[];\nexpect call3==[-1,10,3,7];\nexpect call4==[0,0,0,0];\nexpect call5==[100];\nexpect call6==[-20,-5,-15,-10];\nexpect call7==[1,10,1,10,1,10];\nexpect call8==[1,3,1,3,2,2];\nexpect call9==[-100,4000,1000,3000,2000];\n}\n"
    },
    "HumanEval/71": {
        "TestCase": "method{:test} check(){\nvar call0:= triangle_area(3,4,5) ;\nvar call1:= triangle_area(6,8,10) ;\nvar call2:= triangle_area(7,24,25) ;\nvar call3:= triangle_area(9,12,15) ;\nvar call4:= triangle_area(10,10,10) ;\nvar call5:= triangle_area(5,5,8) ;\nvar call6:= triangle_area(2.50000000,4.00000000,3.50000000) ;\nvar call7:= triangle_area(12,16,20) ;\nvar call8:= triangle_area(8.50000000,9.50000000,12) ;\nvar call9:= triangle_area(13,14,15) ;\nexpect call0==6.00000000;\nexpect call1==24.00000000;\nexpect call2==84.00000000;\nexpect call3==54.00000000;\nexpect call4==43.30000000;\nexpect call5==12.00000000;\nexpect call6==4.33000000;\nexpect call7==96.00000000;\nexpect call8==40.11000000;\nexpect call9==84.00000000;\n}\n"
    },
    "HumanEval/72": {
        "TestCase": "method{:test} check(){\nvar call0:= will_it_fly([1,1,1,1],5) ;\nvar call1:= will_it_fly([2,3,4],10) ;\nvar call2:= will_it_fly([5,4,5],14) ;\nvar call3:= will_it_fly([7],7) ;\nvar call4:= will_it_fly([1,2,1],3) ;\nvar call5:= will_it_fly([8,2,8],20) ;\nvar call6:= will_it_fly([9,3,9],12) ;\nvar call7:= will_it_fly([3,3,3],9) ;\nvar call8:= will_it_fly([10,20,10],40) ;\nvar call9:= will_it_fly([1,0,1,0,1],5) ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==true;\nexpect call3==true;\nexpect call4==false;\nexpect call5==true;\nexpect call6==false;\nexpect call7==true;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/73": {
        "TestCase": "method{:test} check(){\nvar call0:= smallest_change([1,2,3,4,3,2,1]) ;\nvar call1:= smallest_change([1,2,3,5,4,7,9,6]) ;\nvar call2:= smallest_change([1,2,3,2,1]) ;\nvar call3:= smallest_change([7,8,9,8,7]) ;\nvar call4:= smallest_change([1,3,1,3,1,3,1]) ;\nvar call5:= smallest_change([5,6,7,8,9,10,11,9,0]) ;\nvar call6:= smallest_change([1,1,1,1,1,1,1]) ;\nvar call7:= smallest_change([2,4,6,8,10,8,7,2]) ;\nvar call8:= smallest_change([5,4,3,2,2,3,4,5]) ;\nvar call9:= smallest_change([9,8,7,6,5,6,7,8,9]) ;\nexpect call0==0;\nexpect call1==4;\nexpect call2==0;\nexpect call3==0;\nexpect call4==0;\nexpect call5==4;\nexpect call6==0;\nexpect call7==3;\nexpect call8==0;\nexpect call9==0;\n}\n"
    },
    "HumanEval/74": {
        "TestCase": "method{:test} check(){\nvar call0:= total_match([\"hello\"],[\"world\"]) ;\nvar call1:= total_match([\"a\",\"b\",\"c\"],[\"abc\",\"de\"]) ;\nvar call2:= total_match([],[]) ;\nvar call3:= total_match([\"a\",\"b\",\"cc\"],[\"aa\",\"bb\",\"c\"]) ;\nvar call4:= total_match([\"python\",\"rocks\"],[\"java\",\"rules\"]) ;\nvar call5:= total_match([\"short\",\"entries\"],[\"this\",\"list\",\"has\",\"more\",\"characters\"]) ;\nvar call6:= total_match([\"one\",\"two\",\"three\"],[\"four\",\"five\",\"six\"]) ;\nvar call7:= total_match([\"same\"],[\"s\",\"a\",\"m\",\"e\"]) ;\nvar call8:= total_match([\"abcdef\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) ;\nvar call9:= total_match([\"12345\"],[\"1\",\"23\",\"456\"]) ;\nexpect call0==[\"hello\"];\nexpect call1==[\"a\",\"b\",\"c\"];\nexpect call2==[];\nexpect call3==[\"a\",\"b\",\"cc\"];\nexpect call4==[\"java\",\"rules\"];\nexpect call5==[\"short\",\"entries\"];\nexpect call6==[\"one\",\"two\",\"three\"];\nexpect call7==[\"same\"];\nexpect call8==[\"abcdef\"];\nexpect call9==[\"12345\"];\n}\n"
    },
    "HumanEval/75": {
        "TestCase": "method{:test} check(){\nvar call0:= is_multiply_prime(30) ;\nvar call1:= is_multiply_prime(42) ;\nvar call2:= is_multiply_prime(66) ;\nvar call3:= is_multiply_prime(70) ;\nvar call4:= is_multiply_prime(105) ;\nvar call5:= is_multiply_prime(90) ;\nvar call6:= is_multiply_prime(77) ;\nvar call7:= is_multiply_prime(2) ;\nvar call8:= is_multiply_prime(215) ;\nvar call9:= is_multiply_prime(25) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==false;\nexpect call6==false;\nexpect call7==false;\nexpect call8==false;\nexpect call9==false;\n}\n"
    },
    "HumanEval/76": {
        "TestCase": "method{:test} check(){\nvar call0:= is_simple_power(1,4) ;\nvar call1:= is_simple_power(2,2) ;\nvar call2:= is_simple_power(8,2) ;\nvar call3:= is_simple_power(3,2) ;\nvar call4:= is_simple_power(3,1) ;\nvar call5:= is_simple_power(5,3) ;\nvar call6:= is_simple_power(27,3) ;\nvar call7:= is_simple_power(0,2) ;\nvar call8:= is_simple_power(16,4) ;\nvar call9:= is_simple_power(81,3) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==false;\nexpect call4==false;\nexpect call5==false;\nexpect call6==true;\nexpect call7==false;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/77": {
        "TestCase": "method{:test} check(){\nvar call0:= iscube(1) ;\nvar call1:= iscube(2) ;\nvar call2:= iscube(-1) ;\nvar call3:= iscube(64) ;\nvar call4:= iscube(0) ;\nvar call5:= iscube(27) ;\nvar call6:= iscube(-8) ;\nvar call7:= iscube(729) ;\nvar call8:= iscube(1000) ;\nvar call9:= iscube(-216) ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==true;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/78": {
        "TestCase": "method{:test} check(){\nvar call0:= hex_key(\"AB\") ;\nvar call1:= hex_key(\"1077E\") ;\nvar call2:= hex_key(\"ABED1A33\") ;\nvar call3:= hex_key(\"123456789ABCDEF0\") ;\nvar call4:= hex_key(\"2020\") ;\nvar call5:= hex_key(\"F0EBA7\") ;\nvar call6:= hex_key(\"3355BB\") ;\nvar call7:= hex_key(\"7D7D7D7\") ;\nvar call8:= hex_key(\"BAD\") ;\nvar call9:= hex_key(\"\") ;\nexpect call0==1;\nexpect call1==2;\nexpect call2==4;\nexpect call3==6;\nexpect call4==2;\nexpect call5==2;\nexpect call6==6;\nexpect call7==7;\nexpect call8==2;\nexpect call9==0;\n}\n"
    },
    "HumanEval/79": {
        "TestCase": ""
    },
    "HumanEval/80": {
        "TestCase": "method{:test} check(){\nvar call0:= is_happy(\"abc\") ;\nvar call1:= is_happy(\"aaa\") ;\nvar call2:= is_happy(\"abcd\") ;\nvar call3:= is_happy(\"aabbcc\") ;\nvar call4:= is_happy(\"xyz\") ;\nvar call5:= is_happy(\"xxyzz\") ;\nvar call6:= is_happy(\"abac\") ;\nvar call7:= is_happy(\"abcdef\") ;\nvar call8:= is_happy(\"a\") ;\nvar call9:= is_happy(\"xyxyxy\") ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==true;\nexpect call3==false;\nexpect call4==true;\nexpect call5==false;\nexpect call6==false;\nexpect call7==true;\nexpect call8==false;\nexpect call9==false;\n}\n"
    },
    "HumanEval/81": {
        "TestCase": "method{:test} check(){\nvar call0:= numerical_letter_grade([4.00000000,3.80000000,3.50000000,3.10000000,2.80000000]) ;\nvar call1:= numerical_letter_grade([2.50000000,2.20000000,1.90000000,1.50000000,1.20000000]) ;\nvar call2:= numerical_letter_grade([0.90000000,0.60000000,0.00000000,3.90000000,3.30000000]) ;\nvar call3:= numerical_letter_grade([4.00000000,4.00000000,4.00000000,4.00000000,4.00000000]) ;\nvar call4:= numerical_letter_grade([0.00000000,0.00000000,0.00000000,0.00000000,0.00000000]) ;\nvar call5:= numerical_letter_grade([3.70000000,3.33000000,2.67000000,1.99000000,0.71000000]) ;\nvar call6:= numerical_letter_grade([2.00000000,2.00000000,2.00000000,2.00000000,2.00000000]) ;\nvar call7:= numerical_letter_grade([3.20000000,2.90000000,2.60000000,2.40000000,2.10000000]) ;\nvar call8:= numerical_letter_grade([1.80000000,1.60000000,1.40000000,1.00000000,0.50000000]) ;\nvar call9:= numerical_letter_grade([4.00000000,3.70000000,3.00000000,2.00000000,1.00000000]) ;\nexpect call0==[\"A+\",\"A\",\"A-\",\"B+\",\"B\"];\nexpect call1==[\"B-\",\"C+\",\"C\",\"C-\",\"D+\"];\nexpect call2==[\"D\",\"D-\",\"E\",\"A\",\"B+\"];\nexpect call3==[\"A+\",\"A+\",\"A+\",\"A+\",\"A+\"];\nexpect call4==[\"E\",\"E\",\"E\",\"E\",\"E\"];\nexpect call5==[\"A-\",\"A-\",\"B-\",\"C\",\"D\"];\nexpect call6==[\"C\",\"C\",\"C\",\"C\",\"C\"];\nexpect call7==[\"B+\",\"B\",\"B-\",\"B-\",\"C+\"];\nexpect call8==[\"C\",\"C-\",\"C-\",\"D\",\"D-\"];\nexpect call9==[\"A+\",\"A-\",\"B\",\"C\",\"D\"];\n}\n"
    },
    "HumanEval/82": {
        "TestCase": "method{:test} check(){\nvar call0:= prime_length(\"a\") ;\nvar call1:= prime_length(\"ab\") ;\nvar call2:= prime_length(\"abc\") ;\nvar call3:= prime_length(\"abcd\") ;\nvar call4:= prime_length(\"abcde\") ;\nvar call5:= prime_length(\"abcdefg\") ;\nvar call6:= prime_length(\"abcdefgh\") ;\nvar call7:= prime_length(\"abcdefghi\") ;\nvar call8:= prime_length(\"abcdefghij\") ;\nvar call9:= prime_length(\"abcdefghijklmnopq\") ;\nexpect call0==false;\nexpect call1==true;\nexpect call2==true;\nexpect call3==false;\nexpect call4==true;\nexpect call5==true;\nexpect call6==false;\nexpect call7==false;\nexpect call8==false;\nexpect call9==true;\n}\n"
    },
    "HumanEval/83": {
        "TestCase": "method{:test} check(){\nvar call0:= starts_one_ends(1) ;\nvar call1:= starts_one_ends(2) ;\nvar call2:= starts_one_ends(3) ;\nvar call3:= starts_one_ends(4) ;\nvar call4:= starts_one_ends(5) ;\nvar call5:= starts_one_ends(6) ;\nvar call6:= starts_one_ends(7) ;\nvar call7:= starts_one_ends(8) ;\nvar call8:= starts_one_ends(9) ;\nvar call9:= starts_one_ends(10) ;\nexpect call0==1;\nexpect call1==18;\nexpect call2==180;\nexpect call3==1800;\nexpect call4==18000;\nexpect call5==180000;\nexpect call6==1800000;\nexpect call7==18000000;\nexpect call8==180000000;\nexpect call9==1800000000;\n}\n"
    },
    "HumanEval/84": {
        "TestCase": "method{:test} check(){\nvar call0:= solve(0) ;\nvar call1:= solve(1) ;\nvar call2:= solve(9) ;\nvar call3:= solve(10) ;\nvar call4:= solve(123) ;\nvar call5:= solve(256) ;\nvar call6:= solve(999) ;\nvar call7:= solve(1000) ;\nvar call8:= solve(4321) ;\nvar call9:= solve(10000) ;\nexpect call0==0;\nexpect call1==1;\nexpect call2==1001;\nexpect call3==1;\nexpect call4==110;\nexpect call5==1101;\nexpect call6==11011;\nexpect call7==1;\nexpect call8==1010;\nexpect call9==1;\n}\n"
    },
    "HumanEval/85": {
        "TestCase": "method{:test} check(){\nvar call0:= add([4,2,6,7]) ;\nvar call1:= add([1,3,5,7,9]) ;\nvar call2:= add([10,20,30,40,50,60]) ;\nvar call3:= add([2,4,6,8,10,12]) ;\nvar call4:= add([11,13,15,17]) ;\nvar call5:= add([4]) ;\nvar call6:= add([1,2,3,4,5,6,7,8]) ;\nvar call7:= add([-2,-4,-6,-8]) ;\nvar call8:= add([0,2,4,6]) ;\nvar call9:= add([3,5,7,2,4,6]) ;\nexpect call0==2;\nexpect call1==0;\nexpect call2==120;\nexpect call3==24;\nexpect call4==0;\nexpect call5==0;\nexpect call6==20;\nexpect call7==-12;\nexpect call8==8;\nexpect call9==8;\n}\n"
    },
    "HumanEval/86": {
        "TestCase": ""
    },
    "HumanEval/87": {
        "TestCase": "method{:test} check(){\nvar call0:= get_row([[]],1) ;\nvar call1:= get_row([[1,2,3],[],[4,1],[1,0,1,1]],1) ;\nvar call2:= get_row([[1,2,2,1],[3,4,1],[1,1,1]],2) ;\nvar call3:= get_row([[5,5,5],[5,5],[5]],5) ;\nvar call4:= get_row([[],[3],[2,3,2],[4,2,3,4]],3) ;\nvar call5:= get_row([[10]],10) ;\nvar call6:= get_row([[1,2,3,4],[5,6],[7,8,1],[9]],9) ;\nvar call7:= get_row([[],[],[]],0) ;\nvar call8:= get_row([[1,2,3],[1,2,3],[1,2,3]],3) ;\nvar call9:= get_row([[0,1],[2,3],[4,5],[6,7],[8,9]],4) ;\nexpect call0==[];\nexpect call1==[(0,0),(2,1),(3,3),(3,2),(3,0)];\nexpect call2==[(0,2),(0,1)];\nexpect call3==[(0,2),(0,1),(0,0),(1,1),(1,0),(2,0)];\nexpect call4==[(1,0),(2,1),(3,2)];\nexpect call5==[(0,0)];\nexpect call6==[(3,0)];\nexpect call7==[];\nexpect call8==[(0,2),(1,2),(2,2)];\nexpect call9==[(2,0)];\n}\n"
    },
    "HumanEval/88": {
        "TestCase": "method{:test} check(){\nvar call0:= sort_array([]) ;\nvar call1:= sort_array([5]) ;\nvar call2:= sort_array([2,4,3,0,1,5]) ;\nvar call3:= sort_array([2,4,3,0,1,5,6]) ;\nvar call4:= sort_array([7,3,8,2,9]) ;\nvar call5:= sort_array([6,1,3,5,4,2,0]) ;\nvar call6:= sort_array([10,20,15,25,5,30]) ;\nvar call7:= sort_array([11,13,7,19,3]) ;\nvar call8:= sort_array([100]) ;\nvar call9:= sort_array([4,2,8,10,6,1,3]) ;\nexpect call0==[];\nexpect call1==[5];\nexpect call2==[0,1,2,3,4,5];\nexpect call3==[6,5,4,3,2,1,0];\nexpect call4==[9,8,7,3,2];\nexpect call5==[6,5,4,3,2,1,0];\nexpect call6==[30,25,20,15,10,5];\nexpect call7==[19,13,11,7,3];\nexpect call8==[100];\nexpect call9==[1,2,3,4,6,8,10];\n}\n"
    },
    "HumanEval/89": {
        "TestCase": ""
    },
    "HumanEval/90": {
        "TestCase": "method{:test} check(){\nvar call0:= next_smallest([1,2,3,4,5]) ;\nvar call1:= next_smallest([5,1,4,3,2]) ;\nvar call2:= next_smallest([]) ;\nvar call3:= next_smallest([1,1]) ;\nvar call4:= next_smallest([-5,-10,0,5,10]) ;\nvar call5:= next_smallest([7]) ;\nvar call6:= next_smallest([8,8,8,8,9,10]) ;\nvar call7:= next_smallest([100,200,300,400,500]) ;\nvar call8:= next_smallest([0,0,0,1,2]) ;\nvar call9:= next_smallest([-1,-2,-3,-4,-5]) ;\nexpect call0==2;\nexpect call1==2;\nexpect call2==None;\nexpect call3==None;\nexpect call4==-5;\nexpect call5==None;\nexpect call6==9;\nexpect call7==200;\nexpect call8==1;\nexpect call9==-4;\n}\n"
    },
    "HumanEval/91": {
        "TestCase": "method{:test} check(){\nvar call0:= is_bored(\"I am bored. Are you?\") ;\nvar call1:= is_bored(\"The sky is blue. I love nature!\") ;\nvar call2:= is_bored(\"Hello! I have a dog. Do you have one?\") ;\nvar call3:= is_bored(\"This is a test sentence. I am testing this function.\") ;\nvar call4:= is_bored(\"Why do you say that? I feel curious.\") ;\nvar call5:= is_bored(\"I like Python. It is an amazing programming language.\") ;\nvar call6:= is_bored(\"Do you want coffee? I think we need some.\") ;\nvar call7:= is_bored(\"I went outside today. It was sunny and beautiful.\") ;\nvar call8:= is_bored(\"Here is a random thought. I wonder if robots dream?\") ;\nvar call9:= is_bored(\"This is not interesting! I want to know more.\") ;\nexpect call0==1;\nexpect call1==1;\nexpect call2==1;\nexpect call3==1;\nexpect call4==1;\nexpect call5==1;\nexpect call6==1;\nexpect call7==1;\nexpect call8==1;\nexpect call9==1;\n}\n"
    },
    "HumanEval/92": {
        "TestCase": "method{:test} check(){\nvar call0:= any_int(5,2,7) ;\nvar call1:= any_int(3,2,2) ;\nvar call2:= any_int(-1,-1,-2) ;\nvar call3:= any_int(0,0,0) ;\nvar call4:= any_int(10,15,25) ;\nvar call5:= any_int(7,3,10) ;\nvar call6:= any_int(50,-20,30) ;\nvar call7:= any_int(-5,-10,-15) ;\nvar call8:= any_int(100,50,150) ;\nvar call9:= any_int(9,4,13) ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==true;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/93": {
        "TestCase": ""
    },
    "HumanEval/94": {
        "TestCase": "method{:test} check(){\nvar call0:= skjkasdkd([3,5,7,11,13,17,19,23,29,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) ;\nvar call1:= skjkasdkd([1,2,4,6,8,10,12,14,16,18,20,3,5,7,11,13,23,37]) ;\nvar call2:= skjkasdkd([1009,1013,1019,1021,1031,1033,1049,1061,1063]) ;\nvar call3:= skjkasdkd([0,100,200,300,400,500,600,700,800,900,3,101,701]) ;\nvar call4:= skjkasdkd([17,19,23,31,37,41,43,47,53,59,61]) ;\nvar call5:= skjkasdkd([809,5779,757,1129,6577,7589,947]) ;\nvar call6:= skjkasdkd([61,83,97,109,163,211,293,353,419,521]) ;\nvar call7:= skjkasdkd([1,5,7,2,8,3,19,29,59,113,79]) ;\nvar call8:= skjkasdkd([1,0,2,3,7,13,71,311,971,1583]) ;\nvar call9:= skjkasdkd([0,17,34,51,73,89,103,137,199,257]) ;\nexpect call0==16;\nexpect call1==10;\nexpect call2==10;\nexpect call3==8;\nexpect call4==7;\nexpect call5==29;\nexpect call6==8;\nexpect call7==5;\nexpect call8==17;\nexpect call9==14;\n}\n"
    },
    "HumanEval/95": {
        "TestCase": "method{:test} check(){\nvar call0:= check_dict_case(map[\"a\":=\"apple\",\"b\":=\"banana\"]) ;\nvar call1:= check_dict_case(map[\"a\":=\"apple\",\"A\":=\"banana\",\"B\":=\"banana\"]) ;\nvar call2:= check_dict_case(map[\"a\":=\"apple\",8:=\"banana\"]) ;\nvar call3:= check_dict_case(map[\"Name\":=\"John\",\"Age\":=\"36\",\"City\":=\"Houston\"]) ;\nvar call4:= check_dict_case(map[\"STATE\":=\"NC\",\"ZIP\":=\"12345\"]) ;\nvar call5:= check_dict_case(map[]) ;\nvar call6:= check_dict_case(map[\"lowercase\":=\"value1\",\"AnotherLowercase\":=\"value2\"]) ;\nvar call7:= check_dict_case(map[\"UPPERCASEKEY1\":=\"value\",\"UPPERCASEKEY2\":=\"value\"]) ;\nvar call8:= check_dict_case(map[\"MixedCaseKey\":=\"value\"]) ;\nvar call9:= check_dict_case(map[\"keyone\":=\"value1\",\"KEYTWO\":=\"value2\"]) ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==false;\nexpect call3==false;\nexpect call4==true;\nexpect call5==false;\nexpect call6==false;\nexpect call7==true;\nexpect call8==false;\nexpect call9==false;\n}\n"
    },
    "HumanEval/96": {
        "TestCase": "method{:test} check(){\nvar call0:= count_up_to(0) ;\nvar call1:= count_up_to(1) ;\nvar call2:= count_up_to(2) ;\nvar call3:= count_up_to(10) ;\nvar call4:= count_up_to(15) ;\nvar call5:= count_up_to(20) ;\nvar call6:= count_up_to(30) ;\nvar call7:= count_up_to(50) ;\nvar call8:= count_up_to(100) ;\nvar call9:= count_up_to(500) ;\nexpect call0==[];\nexpect call1==[];\nexpect call2==[];\nexpect call3==[2,3,5,7];\nexpect call4==[2,3,5,7,11,13];\nexpect call5==[2,3,5,7,11,13,17,19];\nexpect call6==[2,3,5,7,11,13,17,19,23,29];\nexpect call7==[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47];\nexpect call8==[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\nexpect call9==[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499];\n}\n"
    },
    "HumanEval/97": {
        "TestCase": "method{:test} check(){\nvar call0:= multiply(148,412) ;\nvar call1:= multiply(19,28) ;\nvar call2:= multiply(2020,1851) ;\nvar call3:= multiply(14,-15) ;\nvar call4:= multiply(-123,78) ;\nvar call5:= multiply(102,-206) ;\nvar call6:= multiply(-9999,-8888) ;\nvar call7:= multiply(345,678) ;\nvar call8:= multiply(111,222) ;\nvar call9:= multiply(0,-7) ;\nexpect call0==16;\nexpect call1==72;\nexpect call2==0;\nexpect call3==20;\nexpect call4==56;\nexpect call5==8;\nexpect call6==2;\nexpect call7==40;\nexpect call8==2;\nexpect call9==0;\n}\n"
    },
    "HumanEval/98": {
        "TestCase": "method{:test} check(){\nvar call0:= count_upper(\"aBCdEf\") ;\nvar call1:= count_upper(\"abcdefg\") ;\nvar call2:= count_upper(\"dBBE\") ;\nvar call3:= count_upper(\"AEIOUX\") ;\nvar call4:= count_upper(\"aAeEiIoOuU\") ;\nvar call5:= count_upper(\"XYZOpQRsTu\") ;\nvar call6:= count_upper(\"\") ;\nvar call7:= count_upper(\"OOOOOOOO\") ;\nvar call8:= count_upper(\"AeIoUAeIoU\") ;\nvar call9:= count_upper(\"aBCDaeAEI\") ;\nexpect call0==1;\nexpect call1==0;\nexpect call2==0;\nexpect call3==3;\nexpect call4==0;\nexpect call5==0;\nexpect call6==0;\nexpect call7==4;\nexpect call8==3;\nexpect call9==2;\n}\n"
    },
    "HumanEval/99": {
        "TestCase": "method{:test} check(){\nvar call0:= closest_integer(\"10\") ;\nvar call1:= closest_integer(\"15.3\") ;\nvar call2:= closest_integer(\"14.5\") ;\nvar call3:= closest_integer(\"-14.5\") ;\nvar call4:= closest_integer(\"0.5\") ;\nvar call5:= closest_integer(\"-0.5\") ;\nvar call6:= closest_integer(\"123.7\") ;\nvar call7:= closest_integer(\"-123.3\") ;\nvar call8:= closest_integer(\"1000000.999\") ;\nvar call9:= closest_integer(\"-999999.5\") ;\nexpect call0==10;\nexpect call1==15;\nexpect call2==15;\nexpect call3==-15;\nexpect call4==1;\nexpect call5==-1;\nexpect call6==124;\nexpect call7==-123;\nexpect call8==1000001;\nexpect call9==-1000000;\n}\n"
    },
    "HumanEval/100": {
        "TestCase": "method{:test} check(){\nvar call0:= make_a_pile(1) ;\nvar call1:= make_a_pile(2) ;\nvar call2:= make_a_pile(5) ;\nvar call3:= make_a_pile(10) ;\nvar call4:= make_a_pile(15) ;\nvar call5:= make_a_pile(20) ;\nvar call6:= make_a_pile(25) ;\nvar call7:= make_a_pile(30) ;\nvar call8:= make_a_pile(50) ;\nvar call9:= make_a_pile(100) ;\nexpect call0==[1];\nexpect call1==[2,4];\nexpect call2==[5,7,9,11,13];\nexpect call3==[10,12,14,16,18,20,22,24,26,28];\nexpect call4==[15,17,19,21,23,25,27,29,31,33,35,37,39,41,43];\nexpect call5==[20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58];\nexpect call6==[25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73];\nexpect call7==[30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88];\nexpect call8==[50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148];\nexpect call9==[100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298];\n}\n"
    },
    "HumanEval/101": {
        "TestCase": "method{:test} check(){\nvar call0:= words_string(\"Hi, my name is John\") ;\nvar call1:= words_string(\"One, two, three, four, five, six\") ;\nvar call2:= words_string(\"apple,orange banana,grape\") ;\nvar call3:= words_string(\"\") ;\nvar call4:= words_string(\"hello\") ;\nvar call5:= words_string(\"comma,separated,words\") ;\nvar call6:= words_string(\"multiple    spaces  and commas,,\") ;\nvar call7:= words_string(\"Python,is,awesome and fun\") ;\nvar call8:= words_string(\"  leading and trailing spaces  \") ;\nvar call9:= words_string(\"123,456 789,000\") ;\nexpect call0==[\"Hi\",\"my\",\"name\",\"is\",\"John\"];\nexpect call1==[\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"];\nexpect call2==[\"apple\",\"orange\",\"banana\",\"grape\"];\nexpect call3==[];\nexpect call4==[\"hello\"];\nexpect call5==[\"comma\",\"separated\",\"words\"];\nexpect call6==[\"multiple\",\"spaces\",\"and\",\"commas\"];\nexpect call7==[\"Python\",\"is\",\"awesome\",\"and\",\"fun\"];\nexpect call8==[\"leading\",\"and\",\"trailing\",\"spaces\"];\nexpect call9==[\"123\",\"456\",\"789\",\"000\"];\n}\n"
    },
    "HumanEval/102": {
        "TestCase": "method{:test} check(){\nvar call0:= choose_num(12,15) ;\nvar call1:= choose_num(14,14) ;\nvar call2:= choose_num(13,12) ;\nvar call3:= choose_num(10,20) ;\nvar call4:= choose_num(21,25) ;\nvar call5:= choose_num(8,9) ;\nvar call6:= choose_num(6,6) ;\nvar call7:= choose_num(2,4) ;\nvar call8:= choose_num(15,30) ;\nvar call9:= choose_num(7,7) ;\nexpect call0==14;\nexpect call1==14;\nexpect call2==-1;\nexpect call3==20;\nexpect call4==24;\nexpect call5==8;\nexpect call6==6;\nexpect call7==4;\nexpect call8==30;\nexpect call9==-1;\n}\n"
    },
    "HumanEval/103": {
        "TestCase": "method{:test} check(){\nvar call0:= rounded_avg(1,5) ;\nvar call1:= rounded_avg(7,5) ;\nvar call2:= rounded_avg(10,20) ;\nvar call3:= rounded_avg(20,33) ;\nvar call4:= rounded_avg(5,5) ;\nvar call5:= rounded_avg(100,110) ;\nvar call6:= rounded_avg(50,75) ;\nvar call7:= rounded_avg(3,8) ;\nvar call8:= rounded_avg(15,30) ;\nvar call9:= rounded_avg(0,100) ;\nexpect call0==3;\nexpect call1==-1;\nexpect call2==15;\nexpect call3==26;\nexpect call4==5;\nexpect call5==105;\nexpect call6==62;\nexpect call7==6;\nexpect call8==22;\nexpect call9==50;\n}\n"
    },
    "HumanEval/104": {
        "TestCase": "method{:test} check(){\nvar call0:= unique_digits([135,57,999,31,19]) ;\nvar call1:= unique_digits([246,4820,860,2424,20]) ;\nvar call2:= unique_digits([1,3,5]) ;\nvar call3:= unique_digits([81,33,75,111]) ;\nvar call4:= unique_digits([10,22,14,6]) ;\nvar call5:= unique_digits([1357,3579,79,1111]) ;\nvar call6:= unique_digits([100,222,400]) ;\nvar call7:= unique_digits([153,303,707,33]) ;\nvar call8:= unique_digits([12345,135,555,975]) ;\nvar call9:= unique_digits([62,44,20,86]) ;\nexpect call0==[19,31,57,135,999];\nexpect call1==[];\nexpect call2==[1,3,5];\nexpect call3==[33,75,111];\nexpect call4==[];\nexpect call5==[79,1111,1357,3579];\nexpect call6==[];\nexpect call7==[33,153];\nexpect call8==[135,555,975];\nexpect call9==[];\n}\n"
    },
    "HumanEval/105": {
        "TestCase": "method{:test} check(){\nvar call0:= by_length([2,1,1,4,5,8,2,3]) ;\nvar call1:= by_length([1,-1,55]) ;\nvar call2:= by_length([]) ;\nvar call3:= by_length([9,6,7,3,2,5]) ;\nvar call4:= by_length([10,11,12,13,14]) ;\nvar call5:= by_length([1,2,3,4,5,6,7,8,9]) ;\nvar call6:= by_length([9,8,7,6,5,4,3,2,1]) ;\nvar call7:= by_length([2,2,2,2,2,2]) ;\nvar call8:= by_length([-1,-2,-3,0,12,100]) ;\nvar call9:= by_length([3,6,1,7,-9,9,5]) ;\nexpect call0==[\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"];\nexpect call1==[\"One\"];\nexpect call2==[];\nexpect call3==[\"Nine\",\"Seven\",\"Six\",\"Five\",\"Three\",\"Two\"];\nexpect call4==[];\nexpect call5==[\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"];\nexpect call6==[\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"];\nexpect call7==[\"Two\",\"Two\",\"Two\",\"Two\",\"Two\",\"Two\"];\nexpect call8==[];\nexpect call9==[\"Nine\",\"Seven\",\"Six\",\"Five\",\"Three\",\"One\"];\n}\n"
    },
    "HumanEval/106": {
        "TestCase": "method{:test} check(){\nvar call0:= f(1) ;\nvar call1:= f(2) ;\nvar call2:= f(3) ;\nvar call3:= f(4) ;\nvar call4:= f(5) ;\nvar call5:= f(6) ;\nvar call6:= f(7) ;\nvar call7:= f(8) ;\nvar call8:= f(9) ;\nvar call9:= f(10) ;\nexpect call0==[1];\nexpect call1==[1,2];\nexpect call2==[1,2,6];\nexpect call3==[1,2,6,24];\nexpect call4==[1,2,6,24,15];\nexpect call5==[1,2,6,24,15,720];\nexpect call6==[1,2,6,24,15,720,28];\nexpect call7==[1,2,6,24,15,720,28,40320];\nexpect call8==[1,2,6,24,15,720,28,40320,45];\nexpect call9==[1,2,6,24,15,720,28,40320,45,3628800];\n}\n"
    },
    "HumanEval/107": {
        "TestCase": "method{:test} check(){\nvar call0:= even_odd_palindrome(1) ;\nvar call1:= even_odd_palindrome(2) ;\nvar call2:= even_odd_palindrome(10) ;\nvar call3:= even_odd_palindrome(15) ;\nvar call4:= even_odd_palindrome(50) ;\nvar call5:= even_odd_palindrome(100) ;\nvar call6:= even_odd_palindrome(150) ;\nvar call7:= even_odd_palindrome(500) ;\nvar call8:= even_odd_palindrome(750) ;\nvar call9:= even_odd_palindrome(1000) ;\nexpect call0==(0,1);\nexpect call1==(1,1);\nexpect call2==(4,5);\nexpect call3==(4,6);\nexpect call4==(6,7);\nexpect call5==(8,10);\nexpect call6==(8,15);\nexpect call7==(28,30);\nexpect call8==(38,45);\nexpect call9==(48,60);\n}\n"
    },
    "HumanEval/108": {
        "TestCase": "method{:test} check(){\nvar call0:= count_nums([1,-1,11,-11,2,-20]) ;\nvar call1:= count_nums([0,0,0]) ;\nvar call2:= count_nums([-12345,6789,0,-99999,54321]) ;\nvar call3:= count_nums([-1,-2,-3,-4]) ;\nvar call4:= count_nums([10,20,30,40]) ;\nvar call5:= count_nums([]) ;\nvar call6:= count_nums([-10,-22,31,45,-57]) ;\nvar call7:= count_nums([111,-222,333,-444,0]) ;\nvar call8:= count_nums([-1,1,-5,5,-10,10]) ;\nvar call9:= count_nums([99,-100,150,-200,0]) ;\nexpect call0==3;\nexpect call1==0;\nexpect call2==4;\nexpect call3==0;\nexpect call4==4;\nexpect call5==0;\nexpect call6==3;\nexpect call7==4;\nexpect call8==3;\nexpect call9==2;\n}\n"
    },
    "HumanEval/109": {
        "TestCase": "method{:test} check(){\nvar call0:= move_one_ball([1,2,3,4,5]) ;\nvar call1:= move_one_ball([3,4,5,1,2]) ;\nvar call2:= move_one_ball([3,5,4,1,2]) ;\nvar call3:= move_one_ball([]) ;\nvar call4:= move_one_ball([6,1,2,3,4,5]) ;\nvar call5:= move_one_ball([10,20,30,1,5]) ;\nvar call6:= move_one_ball([5,6,7,8,1]) ;\nvar call7:= move_one_ball([1,3,5,7,9]) ;\nvar call8:= move_one_ball([4,1,2,3]) ;\nvar call9:= move_one_ball([9,8,7,1,2,3]) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==false;\nexpect call3==true;\nexpect call4==true;\nexpect call5==true;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==false;\n}\n"
    },
    "HumanEval/110": {
        "TestCase": ""
    },
    "HumanEval/111": {
        "TestCase": "method{:test} check(){\nvar call0:= histogram(\"a b c\") ;\nvar call1:= histogram(\"a b b a\") ;\nvar call2:= histogram(\"a b c a b\") ;\nvar call3:= histogram(\"b b b b a\") ;\nvar call4:= histogram(\"\") ;\nvar call5:= histogram(\"x y x z z z\") ;\nvar call6:= histogram(\"r s t u r u r\") ;\nvar call7:= histogram(\"m m n n o o n m\") ;\nvar call8:= histogram(\"p q p r s t p\") ;\nvar call9:= histogram(\"w w w x x y z\") ;\nexpect call0==map[\"a\":=1,\"b\":=1,\"c\":=1];\nexpect call1==map[\"a\":=2,\"b\":=2];\nexpect call2==map[\"a\":=2,\"b\":=2];\nexpect call3==map[\"b\":=4];\nexpect call4==map[];\nexpect call5==map[\"z\":=3];\nexpect call6==map[\"r\":=3];\nexpect call7==map[\"m\":=3,\"n\":=3];\nexpect call8==map[\"p\":=3];\nexpect call9==map[\"w\":=3];\n}\n"
    },
    "HumanEval/112": {
        "TestCase": "method{:test} check(){\nvar call0:= reverse_delete(\"abcde\",\"ae\") ;\nvar call1:= reverse_delete(\"abcdef\",\"b\") ;\nvar call2:= reverse_delete(\"abcdedcba\",\"ab\") ;\nvar call3:= reverse_delete(\"racecar\",\"r\") ;\nvar call4:= reverse_delete(\"level\",\"e\") ;\nvar call5:= reverse_delete(\"palindrome\",\"aeiou\") ;\nvar call6:= reverse_delete(\"noon\",\"n\") ;\nvar call7:= reverse_delete(\"abcdefghij\",\"gfh\") ;\nvar call8:= reverse_delete(\"madam\",\"m\") ;\nvar call9:= reverse_delete(\"radar\",\"r\") ;\nexpect call0==(\"bcd\",false);\nexpect call1==(\"acdef\",false);\nexpect call2==(\"cdedc\",true);\nexpect call3==(\"aceca\",true);\nexpect call4==(\"lvl\",true);\nexpect call5==(\"plndrm\",false);\nexpect call6==(\"oo\",true);\nexpect call7==(\"abcdeij\",false);\nexpect call8==(\"ada\",true);\nexpect call9==(\"ada\",true);\n}\n"
    },
    "HumanEval/113": {
        "TestCase": "method{:test} check(){\nvar call0:= odd_count([\"1234567\"]) ;\nvar call1:= odd_count([\"3\",\"11111111\"]) ;\nvar call2:= odd_count([\"9\"]) ;\nvar call3:= odd_count([\"24680\",\"13579\"]) ;\nvar call4:= odd_count([\"\"]) ;\nvar call5:= odd_count([\"12345\",\"67890\",\"13579\"]) ;\nvar call6:= odd_count([\"00000\"]) ;\nvar call7:= odd_count([\"11111\",\"22222\",\"33333\",\"44444\",\"55555\"]) ;\nvar call8:= odd_count([\"1357\",\"2468\"]) ;\nvar call9:= odd_count([\"9876543210\",\"111111111\"]) ;\nexpect call0==[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"];\nexpect call1==[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\"the number of odd elements 8n the str8ng 8 of the 8nput.\"];\nexpect call2==[\"the number of odd elements 1n the str1ng 1 of the 1nput.\"];\nexpect call3==[\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\"the number of odd elements 5n the str5ng 5 of the 5nput.\"];\nexpect call4==[\"the number of odd elements 0n the str0ng 0 of the 0nput.\"];\nexpect call5==[\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\"the number of odd elements 2n the str2ng 2 of the 2nput.\",\"the number of odd elements 5n the str5ng 5 of the 5nput.\"];\nexpect call6==[\"the number of odd elements 0n the str0ng 0 of the 0nput.\"];\nexpect call7==[\"the number of odd elements 5n the str5ng 5 of the 5nput.\",\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\"the number of odd elements 5n the str5ng 5 of the 5nput.\",\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\"the number of odd elements 5n the str5ng 5 of the 5nput.\"];\nexpect call8==[\"the number of odd elements 4n the str4ng 4 of the 4nput.\",\"the number of odd elements 0n the str0ng 0 of the 0nput.\"];\nexpect call9==[\"the number of odd elements 5n the str5ng 5 of the 5nput.\",\"the number of odd elements 9n the str9ng 9 of the 9nput.\"];\n}\n"
    },
    "HumanEval/114": {
        "TestCase": "method{:test} check(){\nvar call0:= minSubArraySum([2,3,4,1,2,4]) ;\nvar call1:= minSubArraySum([-1,-2,-3]) ;\nvar call2:= minSubArraySum([0,-5,7,-6,8,-2]) ;\nvar call3:= minSubArraySum([-10,-15,-7,-1]) ;\nvar call4:= minSubArraySum([5,-3,2,-8,1,-4]) ;\nvar call5:= minSubArraySum([3,6,1,-9,4,-2,7]) ;\nvar call6:= minSubArraySum([-5,-10,-20,0,10,15]) ;\nvar call7:= minSubArraySum([-4]) ;\nvar call8:= minSubArraySum([10,1,2,-30,4,-2]) ;\nvar call9:= minSubArraySum([-8,-7,-6,7,8,-9,-10]) ;\nexpect call0==1;\nexpect call1==-6;\nexpect call2==-6;\nexpect call3==-33;\nexpect call4==-12;\nexpect call5==-9;\nexpect call6==-35;\nexpect call7==-4;\nexpect call8==-30;\nexpect call9==-25;\n}\n"
    },
    "HumanEval/115": {
        "TestCase": "method{:test} check(){\nvar call0:= max_fill([[0,0,1,0],[0,1,0,0],[1,1,1,1]],1) ;\nvar call1:= max_fill([[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]],2) ;\nvar call2:= max_fill([[0,0,0],[0,0,0]],5) ;\nvar call3:= max_fill([[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]],10) ;\nvar call4:= max_fill([[0,0,1,0,1],[1,1,0,1,0],[0,1,1,1,1]],3) ;\nvar call5:= max_fill([[0,1],[1,1],[0,0]],1) ;\nvar call6:= max_fill([[1,0,0,1,1],[1,1,1,1,1],[0,0,0,0,0],[1,0,0,1,0]],5) ;\nvar call7:= max_fill([[1,1,1,1],[1,1,1,0],[0,0,0,0],[0,1,1,1]],2) ;\nvar call8:= max_fill([[0,1],[1,1],[1,0],[0,1],[1,1]],4) ;\nvar call9:= max_fill([[1],[1],[1],[1],[1],[1],[1],[1],[1]],2) ;\nexpect call0==6;\nexpect call1==5;\nexpect call2==0;\nexpect call3==10;\nexpect call4==4;\nexpect call5==3;\nexpect call6==3;\nexpect call7==6;\nexpect call8==5;\nexpect call9==9;\n}\n"
    },
    "HumanEval/116": {
        "TestCase": "method{:test} check(){\nvar call0:= sort_array([1,5,2,3,4]) ;\nvar call1:= sort_array([0,10,7,15,2]) ;\nvar call2:= sort_array([20,31,27,8,5]) ;\nvar call3:= sort_array([9,14,3,6,1]) ;\nvar call4:= sort_array([17,23,11,2,0]) ;\nvar call5:= sort_array([39,56,12,27,41]) ;\nvar call6:= sort_array([7,4,1,12,3,10]) ;\nvar call7:= sort_array([16,32,48,64,80]) ;\nvar call8:= sort_array([255,1,2,127,14,8]) ;\nvar call9:= sort_array([1023,511,15,7,3,1]) ;\nexpect call0==[1,2,4,3,5];\nexpect call1==[0,2,10,7,15];\nexpect call2==[8,5,20,27,31];\nexpect call3==[1,3,6,9,14];\nexpect call4==[0,2,17,11,23];\nexpect call5==[12,41,56,27,39];\nexpect call6==[1,4,3,10,12,7];\nexpect call7==[16,32,64,48,80];\nexpect call8==[1,2,8,14,127,255];\nexpect call9==[1,3,7,15,511,1023];\n}\n"
    },
    "HumanEval/117": {
        "TestCase": "method{:test} check(){\nvar call0:= select_words(\"Mary had a little lamb\",4) ;\nvar call1:= select_words(\"Mary had a little lamb\",3) ;\nvar call2:= select_words(\"simple white space\",2) ;\nvar call3:= select_words(\"Hello world\",4) ;\nvar call4:= select_words(\"Uncle sam\",3) ;\nvar call5:= select_words(\"Python programming is fun\",6) ;\nvar call6:= select_words(\"She sells sea shells by the seashore\",5) ;\nvar call7:= select_words(\"The quick brown fox jumps over the lazy dog\",3) ;\nvar call8:= select_words(\"Banana apple orange grape\",4) ;\nvar call9:= select_words(\"Data science is amazing\",7) ;\nexpect call0==[\"little\"];\nexpect call1==[\"Mary\",\"lamb\"];\nexpect call2==[];\nexpect call3==[\"world\"];\nexpect call4==[\"Uncle\"];\nexpect call5==[];\nexpect call6==[\"shells\"];\nexpect call7==[\"quick\",\"lazy\"];\nexpect call8==[];\nexpect call9==[];\n}\n"
    },
    "HumanEval/118": {
        "TestCase": ""
    },
    "HumanEval/119": {
        "TestCase": ""
    },
    "HumanEval/120": {
        "TestCase": "method{:test} check(){\nvar call0:= maximum([3,1,2,4,5],3) ;\nvar call1:= maximum([-10,-20,5,15,2],2) ;\nvar call2:= maximum([1000,-1000,0,500,-500],1) ;\nvar call3:= maximum([1],0) ;\nvar call4:= maximum([4,4,4,-4,-4],3) ;\nvar call5:= maximum([5,5,5,-5,-5,0],4) ;\nvar call6:= maximum([10,20,30,40,50,60],6) ;\nvar call7:= maximum([-1,-2,-3,-4,-5],2) ;\nvar call8:= maximum([7,8,9,-10,0,6,5],5) ;\nvar call9:= maximum([1,1,1,1,1,1,1,1],1) ;\nexpect call0==[3,4,5];\nexpect call1==[5,15];\nexpect call2==[1000];\nexpect call3==[];\nexpect call4==[4,4,4];\nexpect call5==[0,5,5,5];\nexpect call6==[10,20,30,40,50,60];\nexpect call7==[-2,-1];\nexpect call8==[5,6,7,8,9];\nexpect call9==[1];\n}\n"
    },
    "HumanEval/121": {
        "TestCase": "method{:test} check(){\nvar call0:= solution([5,8,7,1]) ;\nvar call1:= solution([3,3,3,3,3]) ;\nvar call2:= solution([30,13,24,321]) ;\nvar call3:= solution([1,2,3,4,5,6,7,8,9]) ;\nvar call4:= solution([]) ;\nvar call5:= solution([11,22,33,44,55]) ;\nvar call6:= solution([-1,-2,-3,-4,-5]) ;\nvar call7:= solution([0,0,0,0,0,1]) ;\nvar call8:= solution([101,202,303,404,505,606,707]) ;\nvar call9:= solution([2,4,8,10,12,14]) ;\nexpect call0==12;\nexpect call1==9;\nexpect call2==0;\nexpect call3==25;\nexpect call4==0;\nexpect call5==99;\nexpect call6==-9;\nexpect call7==0;\nexpect call8==1616;\nexpect call9==0;\n}\n"
    },
    "HumanEval/122": {
        "TestCase": "method{:test} check(){\nvar call0:= add_elements([12,3,400,17,89,1000],5) ;\nvar call1:= add_elements([111,21,3,400,5,6,7,8,9],9) ;\nvar call2:= add_elements([45,67,1234,11,88,100],4) ;\nvar call3:= add_elements([1,233,7,89,3333,55,66],6) ;\nvar call4:= add_elements([99],1) ;\nvar call5:= add_elements([987,65,43],3) ;\nvar call6:= add_elements([1000,2,300,4000,15,25,35],5) ;\nvar call7:= add_elements([1,22,333,444,55555,666,77],3) ;\nvar call8:= add_elements([100,200,20,30,1],5) ;\nvar call9:= add_elements([12,1234,56,789,90,12345],6) ;\nexpect call0==121;\nexpect call1==59;\nexpect call2==123;\nexpect call3==152;\nexpect call4==99;\nexpect call5==108;\nexpect call6==17;\nexpect call7==23;\nexpect call8==51;\nexpect call9==158;\n}\n"
    },
    "HumanEval/123": {
        "TestCase": "method{:test} check(){\nvar call0:= get_odd_collatz(1) ;\nvar call1:= get_odd_collatz(2) ;\nvar call2:= get_odd_collatz(3) ;\nvar call3:= get_odd_collatz(4) ;\nvar call4:= get_odd_collatz(5) ;\nvar call5:= get_odd_collatz(6) ;\nvar call6:= get_odd_collatz(7) ;\nvar call7:= get_odd_collatz(10) ;\nvar call8:= get_odd_collatz(15) ;\nvar call9:= get_odd_collatz(27) ;\nexpect call0==[1];\nexpect call1==[1];\nexpect call2==[1,3,5];\nexpect call3==[1];\nexpect call4==[1,5];\nexpect call5==[1,3,5];\nexpect call6==[1,5,7,11,13,17];\nexpect call7==[1,5];\nexpect call8==[1,5,15,23,35,53];\nexpect call9==[1,5,23,27,31,35,41,47,53,61,71,91,103,107,121,137,155,161,167,175,233,251,263,283,319,325,377,395,425,433,445,479,577,593,719,911,1079,1367,1619,2051,2429,3077];\n}\n"
    },
    "HumanEval/124": {
        "TestCase": "method{:test} check(){\nvar call0:= valid_date(\"03-11-2000\") ;\nvar call1:= valid_date(\"15-01-2012\") ;\nvar call2:= valid_date(\"04-0-2040\") ;\nvar call3:= valid_date(\"06-04-2020\") ;\nvar call4:= valid_date(\"06/04/2020\") ;\nvar call5:= valid_date(\"02-29-2020\") ;\nvar call6:= valid_date(\"02-30-2020\") ;\nvar call7:= valid_date(\"12-31-1999\") ;\nvar call8:= valid_date(\"00-15-2015\") ;\nvar call9:= valid_date(\"07-15-2023\") ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==false;\nexpect call3==true;\nexpect call4==false;\nexpect call5==true;\nexpect call6==false;\nexpect call7==false;\nexpect call8==false;\nexpect call9==true;\n}\n"
    },
    "HumanEval/125": {
        "TestCase": "method{:test} check(){\nvar call0:= split_words(\"Hello world!\") ;\nvar call1:= split_words(\"Hello,world!\") ;\nvar call2:= split_words(\"abcdef\") ;\nvar call3:= split_words(\"The quick brown fox jumped over the lazy dog.\") ;\nvar call4:= split_words(\"a,b,c,d,e\") ;\nvar call5:= split_words(\"xyz\") ;\nvar call6:= split_words(\"12345\") ;\nvar call7:= split_words(\"Hello, world without spaces\") ;\nvar call8:= split_words(\"word1 word2,word3 word4\") ;\nvar call9:= split_words(\"abcDEFghiJKL\") ;\nexpect call0==[\"Hello\",\"world!\"];\nexpect call1==[\"Hello\",\"world!\"];\nexpect call2==3;\nexpect call3==[\"The\",\"quick\",\"brown\",\"fox\",\"jumped\",\"over\",\"the\",\"lazy\",\"dog.\"];\nexpect call4==[\"a\",\"b\",\"c\",\"d\",\"e\"];\nexpect call5==2;\nexpect call6==0;\nexpect call7==[\"Hello,\",\"world\",\"without\",\"spaces\"];\nexpect call8==[\"word1\",\"word2,word3\",\"word4\"];\nexpect call9==2;\n}\n"
    },
    "HumanEval/126": {
        "TestCase": "method{:test} check(){\nvar call0:= is_sorted([5]) ;\nvar call1:= is_sorted([1,2,3,4,5]) ;\nvar call2:= is_sorted([1,3,2,4,5]) ;\nvar call3:= is_sorted([1,2,3,3,4,5]) ;\nvar call4:= is_sorted([1,2,2,2,4,5]) ;\nvar call5:= is_sorted([1,1,2,2,3,3]) ;\nvar call6:= is_sorted([1,2,3,4,5,6]) ;\nvar call7:= is_sorted([7,8,9,10]) ;\nvar call8:= is_sorted([10,11,12,12]) ;\nvar call9:= is_sorted([10,10,10,20]) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==false;\nexpect call3==true;\nexpect call4==false;\nexpect call5==true;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==false;\n}\n"
    },
    "HumanEval/127": {
        "TestCase": ""
    },
    "HumanEval/128": {
        "TestCase": "method{:test} check(){\nvar call0:= prod_signs([1,2,3,-4]) ;\nvar call1:= prod_signs([0,1,-2]) ;\nvar call2:= prod_signs([]) ;\nvar call3:= prod_signs([-5,-6,7]) ;\nvar call4:= prod_signs([10]) ;\nvar call5:= prod_signs([0]) ;\nvar call6:= prod_signs([1,-1,0,2,-3]) ;\nvar call7:= prod_signs([-1,-2,-3,-4]) ;\nvar call8:= prod_signs([1,2,3,4]) ;\nvar call9:= prod_signs([1,-1]) ;\nexpect call0==-10;\nexpect call1==0;\nexpect call2==None;\nexpect call3==18;\nexpect call4==10;\nexpect call5==0;\nexpect call6==0;\nexpect call7==10;\nexpect call8==10;\nexpect call9==-2;\n}\n"
    },
    "HumanEval/129": {
        "TestCase": "method{:test} check(){\nvar call0:= minPath([[1,2,3],[4,5,6],[7,8,9]],3) ;\nvar call1:= minPath([[5,9,3],[4,1,6],[7,8,2]],1) ;\nvar call2:= minPath([[10,3,6],[15,1,9],[4,7,12]],5) ;\nvar call3:= minPath([[1,24,30],[5,6,9],[14,15,17]],2) ;\nvar call4:= minPath([[11,19,4],[8,1,5],[22,13,3]],4) ;\nvar call5:= minPath([[5,12,2],[4,1,10],[18,7,3]],6) ;\nvar call6:= minPath([[1,3,5,7],[9,11,13,15],[2,4,6,8],[10,12,14,16]],3) ;\nvar call7:= minPath([[21,18,1],[23,19,5],[30,25,13]],1) ;\nvar call8:= minPath([[1,9],[3,2]],2) ;\nvar call9:= minPath([[5,8],[1,4]],3) ;\nexpect call0==[1,2,1];\nexpect call1==[1];\nexpect call2==[1,3,1,3,1];\nexpect call3==[1,5];\nexpect call4==[1,5,1,5];\nexpect call5==[1,4,1,4,1,4];\nexpect call6==[1,3,1];\nexpect call7==[1];\nexpect call8==[1,3];\nexpect call9==[1,4,1];\n}\n"
    },
    "HumanEval/130": {
        "TestCase": "method{:test} check(){\nvar call0:= tri(0) ;\nvar call1:= tri(1) ;\nvar call2:= tri(2) ;\nvar call3:= tri(3) ;\nvar call4:= tri(4) ;\nvar call5:= tri(5) ;\nvar call6:= tri(6) ;\nvar call7:= tri(7) ;\nvar call8:= tri(8) ;\nvar call9:= tri(9) ;\nexpect call0==[1];\nexpect call1==[1,3];\nexpect call2==[1,3,2.00000000];\nexpect call3==[1,3,2.00000000,8.00000000];\nexpect call4==[1,3,2.00000000,8.00000000,3.00000000];\nexpect call5==[1,3,2.00000000,8.00000000,3.00000000,15.00000000];\nexpect call6==[1,3,2.00000000,8.00000000,3.00000000,15.00000000,4.00000000];\nexpect call7==[1,3,2.00000000,8.00000000,3.00000000,15.00000000,4.00000000,24.00000000];\nexpect call8==[1,3,2.00000000,8.00000000,3.00000000,15.00000000,4.00000000,24.00000000,5.00000000];\nexpect call9==[1,3,2.00000000,8.00000000,3.00000000,15.00000000,4.00000000,24.00000000,5.00000000,35.00000000];\n}\n"
    },
    "HumanEval/131": {
        "TestCase": "method{:test} check(){\nvar call0:= digits(1) ;\nvar call1:= digits(4) ;\nvar call2:= digits(235) ;\nvar call3:= digits(2468) ;\nvar call4:= digits(111) ;\nvar call5:= digits(102030) ;\nvar call6:= digits(357) ;\nvar call7:= digits(8642) ;\nvar call8:= digits(97531) ;\nvar call9:= digits(222) ;\nexpect call0==1;\nexpect call1==0;\nexpect call2==15;\nexpect call3==0;\nexpect call4==1;\nexpect call5==3;\nexpect call6==105;\nexpect call7==0;\nexpect call8==945;\nexpect call9==0;\n}\n"
    },
    "HumanEval/132": {
        "TestCase": ""
    },
    "HumanEval/133": {
        "TestCase": "method{:test} check(){\nvar call0:= sum_squares([1,2,3]) ;\nvar call1:= sum_squares([1,4,9]) ;\nvar call2:= sum_squares([1,3,5,7]) ;\nvar call3:= sum_squares([1.40000000,4.20000000,0]) ;\nvar call4:= sum_squares([-2.40000000,1,1]) ;\nvar call5:= sum_squares([0.10000000,0.50000000,0.90000000]) ;\nvar call6:= sum_squares([-1.10000000,-2.50000000,3.80000000]) ;\nvar call7:= sum_squares([5.50000000,6.10000000,7.90000000]) ;\nvar call8:= sum_squares([2,3.30000000,-4.60000000,7.20000000]) ;\nvar call9:= sum_squares([10,0.40000000,-5,3.60000000,8.80000000]) ;\nexpect call0==14;\nexpect call1==98;\nexpect call2==84;\nexpect call3==29;\nexpect call4==6;\nexpect call5==3;\nexpect call6==21;\nexpect call7==149;\nexpect call8==100;\nexpect call9==223;\n}\n"
    },
    "HumanEval/134": {
        "TestCase": "method{:test} check(){\nvar call0:= check_if_last_char_is_a_letter(\"apple pie\") ;\nvar call1:= check_if_last_char_is_a_letter(\"apple pi e\") ;\nvar call2:= check_if_last_char_is_a_letter(\"apple pi e \") ;\nvar call3:= check_if_last_char_is_a_letter(\"\") ;\nvar call4:= check_if_last_char_is_a_letter(\" \") ;\nvar call5:= check_if_last_char_is_a_letter(\"abc 123 e\") ;\nvar call6:= check_if_last_char_is_a_letter(\"hello world z\") ;\nvar call7:= check_if_last_char_is_a_letter(\"x y z \") ;\nvar call8:= check_if_last_char_is_a_letter(\"one two a\") ;\nvar call9:= check_if_last_char_is_a_letter(\"test x1 z3 a\") ;\nexpect call0==false;\nexpect call1==true;\nexpect call2==false;\nexpect call3==false;\nexpect call4==false;\nexpect call5==true;\nexpect call6==true;\nexpect call7==false;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/135": {
        "TestCase": "method{:test} check(){\nvar call0:= can_arrange([1,2,4,3,5]) ;\nvar call1:= can_arrange([1,2,3]) ;\nvar call2:= can_arrange([5,4,3,2,1]) ;\nvar call3:= can_arrange([10,20,15,25,30]) ;\nvar call4:= can_arrange([1,3,5,7,6,8,9]) ;\nvar call5:= can_arrange([100,90,80,85,70]) ;\nvar call6:= can_arrange([1,1,1,1,1]) ;\nvar call7:= can_arrange([10,30,40,20]) ;\nvar call8:= can_arrange([1]) ;\nvar call9:= can_arrange([5,10,15,20,25]) ;\nexpect call0==3;\nexpect call1==-1;\nexpect call2==4;\nexpect call3==2;\nexpect call4==4;\nexpect call5==4;\nexpect call6==-1;\nexpect call7==3;\nexpect call8==-1;\nexpect call9==-1;\n}\n"
    },
    "HumanEval/136": {
        "TestCase": "method{:test} check(){\nvar call0:= largest_smallest_integers([2,4,-1,3,5,-7]) ;\nvar call1:= largest_smallest_integers([0,0,0]) ;\nvar call2:= largest_smallest_integers([]) ;\nvar call3:= largest_smallest_integers([1,2,3,4,5]) ;\nvar call4:= largest_smallest_integers([-10,-20,-30,-40]) ;\nvar call5:= largest_smallest_integers([-1,1,-2,2,-3,3]) ;\nvar call6:= largest_smallest_integers([7]) ;\nvar call7:= largest_smallest_integers([-1,0,3,-5,10,-8,2]) ;\nvar call8:= largest_smallest_integers([-1000,1000,-500,500,0]) ;\nvar call9:= largest_smallest_integers([-3,-2,-1,0,1,2,3]) ;\nexpect call0==(-1,2);\nexpect call1==(None,None);\nexpect call2==(None,None);\nexpect call3==(None,1);\nexpect call4==(-10,None);\nexpect call5==(-1,1);\nexpect call6==(None,7);\nexpect call7==(-1,2);\nexpect call8==(-500,500);\nexpect call9==(-1,1);\n}\n"
    },
    "HumanEval/137": {
        "TestCase": "method{:test} check(){\nvar call0:= compare_one(1,2.50000000) ;\nvar call1:= compare_one(\"2,3\",3) ;\nvar call2:= compare_one(\"5.1\",\"6\") ;\nvar call3:= compare_one(1,\"1\") ;\nvar call4:= compare_one(\"10,5\",\"10.4\") ;\nvar call5:= compare_one(4.20000000,4.10000000) ;\nvar call6:= compare_one(\"7\",\"7\") ;\nvar call7:= compare_one(\"1.29\",\"1,3\") ;\nvar call8:= compare_one(0,\"0\") ;\nvar call9:= compare_one(\"3,14159\",3.14000000) ;\nexpect call0==2.50000000;\nexpect call1==3;\nexpect call2==6;\nexpect call3==None;\nexpect call4==10;\nexpect call5==4.20000000;\nexpect call6==None;\nexpect call7==1;\nexpect call8==None;\nexpect call9==3;\n}\n"
    },
    "HumanEval/138": {
        "TestCase": "method{:test} check(){\nvar call0:= is_equal_to_sum_even(8) ;\nvar call1:= is_equal_to_sum_even(10) ;\nvar call2:= is_equal_to_sum_even(12) ;\nvar call3:= is_equal_to_sum_even(100) ;\nvar call4:= is_equal_to_sum_even(50) ;\nvar call5:= is_equal_to_sum_even(4) ;\nvar call6:= is_equal_to_sum_even(6) ;\nvar call7:= is_equal_to_sum_even(0) ;\nvar call8:= is_equal_to_sum_even(7) ;\nvar call9:= is_equal_to_sum_even(15) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==false;\nexpect call6==false;\nexpect call7==false;\nexpect call8==false;\nexpect call9==false;\n}\n"
    },
    "HumanEval/139": {
        "TestCase": "method{:test} check(){\nvar call0:= special_factorial(1) ;\nvar call1:= special_factorial(2) ;\nvar call2:= special_factorial(3) ;\nvar call3:= special_factorial(4) ;\nvar call4:= special_factorial(5) ;\nvar call5:= special_factorial(6) ;\nvar call6:= special_factorial(7) ;\nvar call7:= special_factorial(8) ;\nvar call8:= special_factorial(9) ;\nvar call9:= special_factorial(10) ;\nexpect call0==1;\nexpect call1==2;\nexpect call2==12;\nexpect call3==288;\nexpect call4==34560;\nexpect call5==24883200;\nexpect call6==125411328000;\nexpect call7==5056584744960000;\nexpect call8==1834933472251084800000;\nexpect call9==6658606584104736522240000000;\n}\n"
    },
    "HumanEval/140": {
        "TestCase": ""
    },
    "HumanEval/141": {
        "TestCase": ""
    },
    "HumanEval/142": {
        "TestCase": "method{:test} check(){\nvar call0:= sum_squares([1,2,3,4,5,6,7,8,9]) ;\nvar call1:= sum_squares([0,-1,-2,-3,-4,-5,-6,-7,-8,-9]) ;\nvar call2:= sum_squares([]) ;\nvar call3:= sum_squares([3,6,9,12]) ;\nvar call4:= sum_squares([10,20,30,40,50,60,70,80,90]) ;\nvar call5:= sum_squares([-1,-5,2,-1,-5]) ;\nvar call6:= sum_squares([7,14,21]) ;\nvar call7:= sum_squares([1,1,1,1,1,1,1,1,1]) ;\nvar call8:= sum_squares([2]) ;\nvar call9:= sum_squares([-3,-6,-9,-12,-15,-18,-21,-24,-27,-30]) ;\nexpect call0==939;\nexpect call1==-465;\nexpect call2==0;\nexpect call3==168;\nexpect call4==860790;\nexpect call5==-126;\nexpect call6==84;\nexpect call7==9;\nexpect call8==4;\nexpect call9==-21621;\n}\n"
    },
    "HumanEval/143": {
        "TestCase": ""
    },
    "HumanEval/144": {
        "TestCase": "method{:test} check(){\nvar call0:= simplify(\"1/2\",\"2/1\") ;\nvar call1:= simplify(\"3/4\",\"4/3\") ;\nvar call2:= simplify(\"5/6\",\"6/1\") ;\nvar call3:= simplify(\"7/3\",\"3/7\") ;\nvar call4:= simplify(\"10/5\",\"5/10\") ;\nvar call5:= simplify(\"2/10\",\"10/1\") ;\nvar call6:= simplify(\"4/8\",\"8/2\") ;\nvar call7:= simplify(\"9/12\",\"12/9\") ;\nvar call8:= simplify(\"11/15\",\"15/11\") ;\nvar call9:= simplify(\"6/10\",\"10/6\") ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==true;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==true;\n}\n"
    },
    "HumanEval/145": {
        "TestCase": "method{:test} check(){\nvar call0:= order_by_points([1,11,-1,-11,-12]) ;\nvar call1:= order_by_points([]) ;\nvar call2:= order_by_points([123,234,345,456,567]) ;\nvar call3:= order_by_points([-123,-234,-345,-456,-567]) ;\nvar call4:= order_by_points([0,-1,1,-10,10,-100,100]) ;\nvar call5:= order_by_points([111,222,333,444,555,666]) ;\nvar call6:= order_by_points([-1,-2,-3,-4,-5,-6,-7,-8,-9]) ;\nvar call7:= order_by_points([90,-90,99,-99,100,-100]) ;\nvar call8:= order_by_points([101,110,11,20,2,-202,-220]) ;\nvar call9:= order_by_points([-105,95,15,-25,205]) ;\nexpect call0==[-1,-11,1,-12,11];\nexpect call1==[];\nexpect call2==[123,234,345,456,567];\nexpect call3==[-123,-234,-345,-456,-567];\nexpect call4==[-1,-10,-100,0,1,10,100];\nexpect call5==[111,222,333,444,555,666];\nexpect call6==[-9,-8,-7,-6,-5,-4,-3,-2,-1];\nexpect call7==[-90,-100,-99,100,90,99];\nexpect call8==[-202,-220,101,110,11,20,2];\nexpect call9==[-25,-105,15,205,95];\n}\n"
    },
    "HumanEval/146": {
        "TestCase": "method{:test} check(){\nvar call0:= specialFilter([15,-73,14,-15]) ;\nvar call1:= specialFilter([33,-2,-3,45,21,109]) ;\nvar call2:= specialFilter([19,31,55,77,101,135]) ;\nvar call3:= specialFilter([12,13,22,53,75,97,99]) ;\nvar call4:= specialFilter([111,103,1357,97531,31]) ;\nvar call5:= specialFilter([9,8,7,135,57,11,55]) ;\nvar call6:= specialFilter([123,567,89,35,79,23,1039]) ;\nvar call7:= specialFilter([-111,95,45,33,71,13,19]) ;\nvar call8:= specialFilter([700,801,91,83,737,553]) ;\nvar call9:= specialFilter([45,105,117,147,165,199]) ;\nexpect call0==1;\nexpect call1==2;\nexpect call2==6;\nexpect call3==5;\nexpect call4==5;\nexpect call5==4;\nexpect call6==5;\nexpect call7==5;\nexpect call8==3;\nexpect call9==5;\n}\n"
    },
    "HumanEval/147": {
        "TestCase": "method{:test} check(){\nvar call0:= get_max_triples(1) ;\nvar call1:= get_max_triples(2) ;\nvar call2:= get_max_triples(3) ;\nvar call3:= get_max_triples(4) ;\nvar call4:= get_max_triples(5) ;\nvar call5:= get_max_triples(6) ;\nvar call6:= get_max_triples(7) ;\nvar call7:= get_max_triples(10) ;\nvar call8:= get_max_triples(15) ;\nvar call9:= get_max_triples(20) ;\nexpect call0==0;\nexpect call1==0;\nexpect call2==0;\nexpect call3==1;\nexpect call4==1;\nexpect call5==4;\nexpect call6==10;\nexpect call7==36;\nexpect call8==130;\nexpect call9==321;\n}\n"
    },
    "HumanEval/148": {
        "TestCase": "method{:test} check(){\nvar call0:= bf(\"Mercury\",\"Venus\") ;\nvar call1:= bf(\"Earth\",\"Jupiter\") ;\nvar call2:= bf(\"Mars\",\"Uranus\") ;\nvar call3:= bf(\"Jupiter\",\"Saturn\") ;\nvar call4:= bf(\"Neptune\",\"Earth\") ;\nvar call5:= bf(\"Venus\",\"Mercury\") ;\nvar call6:= bf(\"Saturn\",\"Earth\") ;\nvar call7:= bf(\"Uranus\",\"Neptune\") ;\nvar call8:= bf(\"Venus\",\"Mars\") ;\nvar call9:= bf(\"Mercury\",\"Neptune\") ;\nexpect call0==();\nexpect call1==(\"Mars\");\nexpect call2==(\"Jupiter\",\"Saturn\");\nexpect call3==();\nexpect call4==(\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\");\nexpect call5==();\nexpect call6==(\"Mars\",\"Jupiter\");\nexpect call7==();\nexpect call8==(\"Earth\");\nexpect call9==(\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\");\n}\n"
    },
    "HumanEval/149": {
        "TestCase": "method{:test} check(){\nvar call0:= sorted_list_sum([\"apple\",\"banana\",\"cherry\",\"date\",\"egg\",\"fig\"]) ;\nvar call1:= sorted_list_sum([\"hello\",\"world\",\"python\",\"java\",\"c++\"]) ;\nvar call2:= sorted_list_sum([\"a\",\"bb\",\"ccc\",\"dddd\",\"ee\"]) ;\nvar call3:= sorted_list_sum([]) ;\nvar call4:= sorted_list_sum([\"sun\",\"moon\",\"star\",\"sky\",\"cloud\",\"rain\"]) ;\nvar call5:= sorted_list_sum([\"aa\",\"aaa\",\"bbbb\",\"cc\",\"ddd\",\"eeee\"]) ;\nvar call6:= sorted_list_sum([\"cat\",\"bat\",\"elephant\",\"dog\",\"ant\"]) ;\nvar call7:= sorted_list_sum([\"x\",\"yy\",\"zzz\",\"ww\",\"u\",\"tttt\"]) ;\nvar call8:= sorted_list_sum([\"\",\"a\",\"bb\",\"ccc\",\"dddd\",\"eeeee\",\"f\"]) ;\nvar call9:= sorted_list_sum([\"racecar\",\"level\",\"rotor\",\"deified\",\"madam\",\"noon\",\"civic\"]) ;\nexpect call0==[\"date\",\"banana\",\"cherry\"];\nexpect call1==[\"java\",\"python\"];\nexpect call2==[\"bb\",\"ee\",\"dddd\"];\nexpect call3==[];\nexpect call4==[\"moon\",\"rain\",\"star\"];\nexpect call5==[\"aa\",\"cc\",\"bbbb\",\"eeee\"];\nexpect call6==[\"elephant\"];\nexpect call7==[\"ww\",\"yy\",\"tttt\"];\nexpect call8==[\"\",\"bb\",\"dddd\"];\nexpect call9==[\"noon\"];\n}\n"
    },
    "HumanEval/150": {
        "TestCase": "method{:test} check(){\nvar call0:= x_or_y(2,5,10) ;\nvar call1:= x_or_y(4,7,14) ;\nvar call2:= x_or_y(7,20,30) ;\nvar call3:= x_or_y(9,50,60) ;\nvar call4:= x_or_y(13,3,8) ;\nvar call5:= x_or_y(15,25,50) ;\nvar call6:= x_or_y(23,100,200) ;\nvar call7:= x_or_y(28,44,88) ;\nvar call8:= x_or_y(31,5,10) ;\nvar call9:= x_or_y(49,19,29) ;\nexpect call0==5;\nexpect call1==14;\nexpect call2==20;\nexpect call3==60;\nexpect call4==3;\nexpect call5==50;\nexpect call6==100;\nexpect call7==88;\nexpect call8==5;\nexpect call9==29;\n}\n"
    },
    "HumanEval/151": {
        "TestCase": "method{:test} check(){\nvar call0:= double_the_difference([1,3,2,0,-5,11,7]) ;\nvar call1:= double_the_difference([9,-2,0.50000000,6,15]) ;\nvar call2:= double_the_difference([0,0,0]) ;\nvar call3:= double_the_difference([-1,-3,-4,-10]) ;\nvar call4:= double_the_difference([]) ;\nvar call5:= double_the_difference([33,17,2,8,21,13]) ;\nvar call6:= double_the_difference([5,5,5,-5,7]) ;\nvar call7:= double_the_difference([999,500,401,202,303,101]) ;\nvar call8:= double_the_difference([1]) ;\nvar call9:= double_the_difference([2,4,-6,5,11,3,-33]) ;\nexpect call0==180;\nexpect call1==306;\nexpect call2==0;\nexpect call3==0;\nexpect call4==0;\nexpect call5==1988;\nexpect call6==124;\nexpect call7==1260812;\nexpect call8==1;\nexpect call9==155;\n}\n"
    },
    "HumanEval/152": {
        "TestCase": "method{:test} check(){\nvar call0:= compare([1,2,3,4,5,6],[1,2,3,4,5,6]) ;\nvar call1:= compare([10,20,30,40,50],[15,25,35,45,55]) ;\nvar call2:= compare([0,0,0,0,0],[1,-1,2,-2,3]) ;\nvar call3:= compare([100,200,300,400],[90,220,310,390]) ;\nvar call4:= compare([0,5,0,5,0,5],[5,0,5,0,5,0]) ;\nvar call5:= compare([-10,-20,-30,-40],[-15,-25,-35,-45]) ;\nvar call6:= compare([1,3,5,7,9],[2,4,6,8,10]) ;\nvar call7:= compare([10,10,10,10],[5,15,5,15]) ;\nvar call8:= compare([7,14,21],[7,10,30]) ;\nvar call9:= compare([11,22,33],[-22,0,11]) ;\nexpect call0==[0,0,0,0,0,0];\nexpect call1==[5,5,5,5,5];\nexpect call2==[1,1,2,2,3];\nexpect call3==[10,20,10,10];\nexpect call4==[5,5,5,5,5,5];\nexpect call5==[5,5,5,5];\nexpect call6==[1,1,1,1,1];\nexpect call7==[5,5,5,5];\nexpect call8==[0,4,9];\nexpect call9==[33,22,22];\n}\n"
    },
    "HumanEval/153": {
        "TestCase": ""
    },
    "HumanEval/154": {
        "TestCase": "method{:test} check(){\nvar call0:= cycpattern_check(\"abcd\",\"abc\") ;\nvar call1:= cycpattern_check(\"hello\",\"ohe\") ;\nvar call2:= cycpattern_check(\"cyclicpattern\",\"clicp\") ;\nvar call3:= cycpattern_check(\"testingrotation\",\"tatior\") ;\nvar call4:= cycpattern_check(\"abcdefg\",\"gabc\") ;\nvar call5:= cycpattern_check(\"rotationcheck\",\"tionro\") ;\nvar call6:= cycpattern_check(\"substringsearch\",\"earchsu\") ;\nvar call7:= cycpattern_check(\"repeatedpattern\",\"ernpatte\") ;\nvar call8:= cycpattern_check(\"overlaptest\",\"lapte\") ;\nvar call9:= cycpattern_check(\"complexcases\",\"casescom\") ;\nexpect call0==true;\nexpect call1==false;\nexpect call2==true;\nexpect call3==false;\nexpect call4==false;\nexpect call5==false;\nexpect call6==false;\nexpect call7==false;\nexpect call8==true;\nexpect call9==false;\n}\n"
    },
    "HumanEval/155": {
        "TestCase": "method{:test} check(){\nvar call0:= even_odd_count(123) ;\nvar call1:= even_odd_count(-456) ;\nvar call2:= even_odd_count(0) ;\nvar call3:= even_odd_count(78910) ;\nvar call4:= even_odd_count(-13579) ;\nvar call5:= even_odd_count(24680) ;\nvar call6:= even_odd_count(1111111111) ;\nvar call7:= even_odd_count(-2222222222) ;\nvar call8:= even_odd_count(333444555666) ;\nvar call9:= even_odd_count(-12345678901234) ;\nexpect call0==(1,2);\nexpect call1==(2,1);\nexpect call2==(1,0);\nexpect call3==(2,3);\nexpect call4==(0,5);\nexpect call5==(5,0);\nexpect call6==(0,10);\nexpect call7==(10,0);\nexpect call8==(6,6);\nexpect call9==(7,7);\n}\n"
    },
    "HumanEval/156": {
        "TestCase": ""
    },
    "HumanEval/157": {
        "TestCase": "method{:test} check(){\nvar call0:= right_angle_triangle(3,4,5) ;\nvar call1:= right_angle_triangle(5,12,13) ;\nvar call2:= right_angle_triangle(8,15,17) ;\nvar call3:= right_angle_triangle(7,24,25) ;\nvar call4:= right_angle_triangle(9,12,15) ;\nvar call5:= right_angle_triangle(1,2,3) ;\nvar call6:= right_angle_triangle(10,6,8) ;\nvar call7:= right_angle_triangle(20,21,29) ;\nvar call8:= right_angle_triangle(11,60,61) ;\nvar call9:= right_angle_triangle(2,2,2) ;\nexpect call0==true;\nexpect call1==true;\nexpect call2==true;\nexpect call3==true;\nexpect call4==true;\nexpect call5==false;\nexpect call6==true;\nexpect call7==true;\nexpect call8==true;\nexpect call9==false;\n}\n"
    },
    "HumanEval/158": {
        "TestCase": ""
    },
    "HumanEval/159": {
        "TestCase": "method{:test} check(){\nvar call0:= eat(5,6,10) ;\nvar call1:= eat(4,8,9) ;\nvar call2:= eat(1,10,10) ;\nvar call3:= eat(2,11,5) ;\nvar call4:= eat(0,15,15) ;\nvar call5:= eat(1000,999,1000) ;\nvar call6:= eat(500,501,499) ;\nvar call7:= eat(250,750,500) ;\nvar call8:= eat(0,0,0) ;\nvar call9:= eat(123,321,456) ;\nexpect call0==(11,4);\nexpect call1==(12,1);\nexpect call2==(11,0);\nexpect call3==(7,0);\nexpect call4==(15,0);\nexpect call5==(1999,1);\nexpect call6==(999,0);\nexpect call7==(750,0);\nexpect call8==(0,0);\nexpect call9==(444,135);\n}\n"
    },
    "HumanEval/160": {
        "TestCase": "method{:test} check(){\nvar call0:= do_algebra([\"+\"],[5,3]) ;\nvar call1:= do_algebra([\"*\",\"-\"],[2,4,6]) ;\nvar call2:= do_algebra([\"//\",\"+\",\"**\"],[9,3,2,4]) ;\nvar call3:= do_algebra([\"-\",\"*\",\"+\"],[10,5,4,3]) ;\nvar call4:= do_algebra([\"+\",\"*\"],[1,2,3]) ;\nvar call5:= do_algebra([\"**\",\"//\",\"-\"],[8,2,2,3]) ;\nvar call6:= do_algebra([\"+\",\"-\",\"+\"],[7,3,1,5]) ;\nvar call7:= do_algebra([\"*\",\"+\",\"**\",\"-\"],[3,2,1,2,5]) ;\nvar call8:= do_algebra([\"//\"],[20,4]) ;\nvar call9:= do_algebra([\"-\",\"*\",\"+\",\"**\"],[6,2,1,3,2]) ;\nexpect call0==8;\nexpect call1==2;\nexpect call2==19;\nexpect call3==-7;\nexpect call4==7;\nexpect call5==29;\nexpect call6==14;\nexpect call7==2;\nexpect call8==5;\nexpect call9==13;\n}\n"
    },
    "HumanEval/161": {
        "TestCase": ""
    },
    "HumanEval/162": {
        "TestCase": ""
    },
    "HumanEval/163": {
        "TestCase": "method{:test} check(){\nvar call0:= generate_integers(2,8) ;\nvar call1:= generate_integers(8,2) ;\nvar call2:= generate_integers(1,9) ;\nvar call3:= generate_integers(5,7) ;\nvar call4:= generate_integers(2,6) ;\nvar call5:= generate_integers(3,10) ;\nvar call6:= generate_integers(0,8) ;\nvar call7:= generate_integers(6,4) ;\nvar call8:= generate_integers(7,7) ;\nvar call9:= generate_integers(2,2) ;\nexpect call0==[2,4,6,8];\nexpect call1==[2,4,6,8];\nexpect call2==[2,4,6,8];\nexpect call3==[6];\nexpect call4==[2,4,6];\nexpect call5==[4,6,8];\nexpect call6==[2,4,6,8];\nexpect call7==[4,6];\nexpect call8==[];\nexpect call9==[2];\n}\n"
    }
}