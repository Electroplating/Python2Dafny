{
    "4": {
        "SourceCode": "def findMedianSortedArrays(nums1: list[int], nums2: list[int]) -> float:\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1 > n2:\n        return findMedianSortedArrays(nums2, nums1)\n    l = 0\n    r = n1\n    while l <= r:\n        partition1 = (l + r) // 2\n        partition2 = (n1 + n2 + 1) // 2 - partition1\n        maxLeft1 = -(2147483648) if partition1 == 0 else nums1[partition1 - 1]\n        maxLeft2 = -(2147483648) if partition2 == 0 else nums2[partition2 - 1]\n        minRight1 = 2147483648 - 1 if partition1 == n1 else nums1[partition1]\n        minRight2 = 2147483648 - 1 if partition2 == n2 else nums2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return (\n                (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) * 0.5\n                if (n1 + n2) % 2 == 0\n                else max(maxLeft1, maxLeft2)\n            )\n        elif maxLeft1 > minRight2:\n            r = partition1 - 1\n        else:\n            l = partition1 + 1"
    },
    "10": {
        "SourceCode": "def isMatch2(s: str, p: str, i: int, j: int) -> bool:\n    return j >= 0 and p[j] == '.' or s[i] == p[j]\ndef isMatch(s: str, p: str) -> bool:\n    m = len(s)\n    n = len(p)\n    dp = [[]]\n    for i in range(m):\n        for j in range(n):\n            dp[i] += [False]\n    dp[0][0] = True\n    for j, c in enumerate(p):\n        if c == '*' and dp[0][j - 1]:\n            dp[0][j + 1] = True\n    for i in range(m):\n        for j in range(n):\n            if p[j] == '*':\n                noRepeat = dp[i + 1][j - 1]\n                doRepeat = isMatch2(s, p, i, j - 1) and dp[i][j + 1]\n                dp[i + 1][j + 1] = noRepeat or doRepeat\n            elif isMatch2(s, p, i, j):\n                dp[i + 1][j + 1] = dp[i][j]\n    return dp[m][n]\n"
    },
    "32": {
        "SourceCode": "def longestValidParentheses(s: str) -> int:\n    s2 = \")\" + s\n    dp = []\n    for i in range(len(s2)):\n        dp += [0]\n    for i in range(1, len(s2)):\n        if s2[i] == ')' and s2[i - dp[i - 1] - 1] == '(':\n            dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n    return max(dp)"
    },
    "41": {
        "SourceCode": "def firstMissingPositive(nums: list[int]) -> int:\n    n = len(nums)\n    for i in range(n):\n        while nums[i] > 0 and nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i, num in enumerate(nums):\n        if num != i + 1:\n            return i + 1\n    return n + 1"
    },
    "42": {
        "SourceCode": "def trap(height: list[int]) -> int:\n    n = len(height)\n    l = [0] * n  # l[i] := max(height[0..i])\n    r = [0] * n  # r[i] := max(height[i..n))\n    for i, h in enumerate(height):\n        l[i] = h if i == 0 else max(h, l[i - 1])\n    for i, h in reversed(list(enumerate(height))):\n        r[i] = h if i == n - 1 else max(h, r[i + 1])\n    return sum(min(l[i], r[i]) - h for i, h in enumerate(height))"
    },
    "44": {
        "SourceCode": "def isMatch2(s: str, p: str, i: int, j: int) -> bool:\n    return i >= 0 and p[j] == '?' or s[i] == p[j]\ndef isMatch(s: str, p: str) -> bool:\n    m = len(s)\n    n = len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for j, c in enumerate(p):\n        if c == '*':\n            dp[0][j + 1] = dp[0][j]\n    for i in range(m):\n        for j in range(n):\n            if p[j] == '*':\n                matchEmpty = dp[i + 1][j]\n                matchSome = dp[i][j + 1]\n                dp[i + 1][j + 1] = matchEmpty or matchSome\n            elif isMatch2(s, p, i, j):\n                dp[i + 1][j + 1] = dp[i][j]\n    return dp[m][n]"
    },
    "84": {
        "SourceCode": "def largestRectangleArea(heights: list[int]) -> int:\n    ans = 0\n    stack = []\n    for i in range(len(heights) + 1):\n        while len(stack) > 0 and (i == len(heights) or heights[stack[-1]] > heights[i]):\n            h = heights[stack[-1]]\n            stack = stack[:-1]\n            w = i - stack[-1] - 1 if len(stack) > 0 else i\n            ans = max(ans, h * w)\n        stack.append(i)\n    return ans"
    },
    "115": {
        "SourceCode": "def numDistinct(s: str, t: str) -> int:\n    m = len(s)\n    n = len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n      dp[i][0] = 1\n    for i in range(1, m + 1):\n      for j in range(1, n + 1):\n        if s[i - 1] == t[j - 1]:\n          dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n        else:\n          dp[i][j] = dp[i - 1][j]\n    return dp[m][n]"
    },
    "123": {
        "SourceCode": "def maxProfit(prices: list[int]) -> int:\n    sellTwo = 0\n    holdTwo = -2147483648\n    sellOne = 0\n    holdOne = -2147483648\n    for price in prices:\n      sellTwo = max(sellTwo, holdTwo + price)\n      holdTwo = max(holdTwo, sellOne - price)\n      sellOne = max(sellOne, holdOne + price)\n      holdOne = max(holdOne, -price)\n    return sellTwo"
    },
    "132": {
        "SourceCode": "def minCut(s: str) -> int:\n    n = len(s)\n    isPalindrome = [[True] * n for _ in range(n)]\n    dp = [n] * n\n    for l in range(2, n + 1):\n      i = 0\n      for j in range(l - 1, n):\n        isPalindrome[i][j] = s[i] == s[j] and isPalindrome[i + 1][j - 1]\n        i += 1\n    for i in range(n):\n      if isPalindrome[0][i]:\n        dp[i] = 0\n        continue\n      for j in range(i):\n        if isPalindrome[j + 1][i]:\n          dp[i] = min(dp[i], dp[j] + 1)\n    return dp[-1]"
    },
    "135": {
        "SourceCode": "def candy(ratings: list[int]) -> int:\n    n = len(ratings)\n    ans = 0\n    l = [1] * n\n    r = [1] * n\n    for i in range(1, n):\n      if ratings[i] > ratings[i - 1]:\n        l[i] = l[i - 1] + 1\n    for i in range(n - 2, -1, -1):\n      if ratings[i] > ratings[i + 1]:\n        r[i] = r[i + 1] + 1\n    for i in range(n):\n      ans += max(l[i], r[i])\n    return ans"
    },
    "154": {
        "SourceCode": "def findMin(nums: list[int]) -> int:\n    l = 0\n    r = len(nums) - 1\n    while l < r:\n      m = (l + r) // 2\n      if nums[m] == nums[r]:\n        r -= 1\n      elif nums[m] < nums[r]:\n        r = m\n      else:\n        l = m + 1\n    return nums[l]"
    },
    "174": {
        "SourceCode": "def calculateMinimumHP(dungeon: list[list[int]]) -> int:\n    m = len(dungeon)\n    n = len(dungeon[0])\n    dp = [2147483647] * (n + 1)\n    dp[n - 1] = 1\n    for i in reversed(range(m)):\n      for j in reversed(range(n)):\n        dp[j] = min(dp[j], dp[j + 1]) - dungeon[i][j]\n        dp[j] = max(dp[j], 1)\n    return dp[0]"
    },
    "188": {
        "SourceCode": "def maxProfit(k: int, prices: list[int]) -> int:\n    if k >= len(prices) // 2:\n        sell = 0\n        hold = -21474836478\n        for price in prices:\n            sell = max(sell, hold + price)\n            hold = max(hold, sell - price)\n        return sell\n    sell = [0] * (k + 1)\n    hold = [-2147483648] * (k + 1)\n    for price in prices:\n        for i in range(k, 0, -1):\n            sell[i] = max(sell[i], hold[i] + price)\n            hold[i] = max(hold[i], sell[i - 1] - price)\n    return sell[k]"
    },
    "220": {
        "SourceCode": "def containsNearbyAlmostDuplicate(nums: list[int], indexDiff: int, valueDiff: int) -> bool:\n    if not nums or indexDiff <= 0 or valueDiff < 0:\n        return False\n    mn = min(nums)\n    diff = valueDiff + 1\n    bucket = {}\n    for i, num in enumerate(nums):\n        key = (num - mn) // diff\n        if key in bucket:\n            return True\n        if key - 1 in bucket and num - bucket[key - 1] < diff:\n            return True\n        if key + 1 in bucket and bucket[key + 1] - num < diff:\n            return True\n        bucket[key] = num\n        if i >= indexDiff:\n            del bucket[(nums[i - indexDiff] - mn) // diff]\n    return False"
    },
    "233": {
        "SourceCode": "def countDigitOne(n: int) -> int:\n    ans = 0\n    pow10 = 1\n    while pow10 <= n:\n        divisor = pow10 * 10\n        quotient = n // divisor\n        remainder = n % divisor\n        if quotient > 0:\n            ans += quotient * pow10\n        if remainder >= pow10:\n            ans += min(remainder - pow10 + 1, pow10)\n        pow10 *= 10\n    return ans"
    },
    "312": {
        "SourceCode": "def maxCoins(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [[0] * (n + 2) for _ in range(n + 2)]\n    nums = [1] + nums + [1]\n    for d in range(n):\n        for i in range(1, n - d + 1):\n            j = i + d\n            for k in range(i, j + 1):\n                dp[i][j] = max(\n                    dp[i][j],\n                    dp[i][k - 1] + dp[k + 1][j] + nums[i - 1] * nums[k] * nums[j + 1],\n                )\n    return dp[1][n]"
    },
    "330": {
        "SourceCode": "def minPatches(nums: list[int], n: int) -> int:\n    ans = 0\n    i = 0  # nums' index\n    miss = 1  # the minimum sum in [1, n] we might miss\n    while miss <= n:\n        if i < len(nums) and nums[i] <= miss:\n            miss += nums[i]\n            i += 1\n        else:\n            # Greedily add `miss` itself to increase the range from\n            # [1, miss) to [1, 2 * miss).\n            miss += miss\n            ans += 1\n    return ans"
    },
    "335": {
        "SourceCode": "def isSelfCrossing(x: list[int]) -> bool:\n    if len(x) <= 3:\n        return False\n    for i in range(3, len(x)):\n        if x[i - 2] <= x[i] and x[i - 1] <= x[i - 3]:\n            return True\n        if i >= 4 and x[i - 1] == x[i - 3] and x[i - 2] <= x[i] + x[i - 4]:\n            return True\n        if (\n            i >= 5\n            and x[i - 4] <= x[i - 2]\n            and x[i - 2] <= x[i] + x[i - 4]\n            and x[i - 1] <= x[i - 3]\n            and x[i - 3] <= x[i - 1] + x[i - 5]\n        ):\n            return True\n    return False"
    },
    "440": {
        "SourceCode": "def getGap(a: int, b: int, n: int) -> int:\n    gap = 0\n    while a <= n:\n        gap += min(n + 1, b) - a\n        a *= 10\n        b *= 10\n    return gap\ndef findKthNumber(n: int, k: int) -> int:\n    ans = 1\n    i = 1\n    while i < k:\n        gap = getGap(ans, ans + 1, n)\n        if i + gap <= k:\n            i += gap\n            ans += 1\n        else:\n            i += 1\n            ans *= 10\n    return ans"
    }
}